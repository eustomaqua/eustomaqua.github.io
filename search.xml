<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Python 之日志处理 —— Logging</title>
      <link href="/2018/2018-09-18-Python-Logging/"/>
      <url>/2018/2018-09-18-Python-Logging/</url>
      <content type="html"><![CDATA[<p><a href="https://blog.igevin.info/posts/python-log/" target="_blank" rel="noopener">Python日志功能详解</a><br><a href="http://python.jobbole.com/86887/" target="_blank" rel="noopener">Python中的logging模块</a></p><h1 id="Why-为什么要使用-logging"><a href="#Why-为什么要使用-logging" class="headerlink" title="Why: 为什么要使用 logging?"></a>Why: 为什么要使用 logging?</h1><p>代码调试时常使用 print 函数输出一些中间变量的值或者相关信息，这样虽然简便，但是在程序调试完之后需要逐个删除或注释 print 语句，比较麻烦。<br>logging 模块能很好地解决这个问题，通过设置 severity level，容易控制在控制台打印的信息，也可以同时把日志信息输出到多个目的地，如控制台、日志文件、网络位置等。  </p><h1 id="How-怎么使用-logging"><a href="#How-怎么使用-logging" class="headerlink" title="How: 怎么使用 logging?"></a>How: 怎么使用 logging?</h1><h2 id="日志基本用法"><a href="#日志基本用法" class="headerlink" title="日志基本用法"></a>日志基本用法</h2><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/local/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logging.info(<span class="string">'info message'</span>)</span><br><span class="line">logging.warn(<span class="string">'warn message'</span>)</span><br><span class="line"><span class="comment">#or logging.warning('warn message')</span></span><br><span class="line">logging.error(<span class="string">'error message'</span>)</span><br><span class="line">logging.critical(<span class="string">'critical message'</span>)</span><br><span class="line"><span class="comment"># 注意：debug, info 不会输出结果</span></span><br></pre></td></tr></table></figure><p>默认情况下，日志将会被打印到屏幕上，日志级别为 WARNING (即只有日志级别等于或高于 WARNING 的日志信息才会输出)，日志格式为 <em>warning level:instance name:warning message</em></p><h3 id="记录到文件"><a href="#记录到文件" class="headerlink" title="记录到文件"></a>记录到文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置日志文件和日志级别</span></span><br><span class="line">logging.basicConfig(filename=<span class="string">'logger.log'</span>, level=logging.INFO)</span><br><span class="line"></span><br><span class="line">logging.debug(<span class="string">'debug message'</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>需要注意的是，配置应在代码文件开头设置，否则不会改变初始的设置 (即代码文件开头的原始设置)。</p><h2 id="完善日志功能"><a href="#完善日志功能" class="headerlink" title="完善日志功能"></a>完善日志功能</h2><p>想要更灵活地使用日志模块，就要了解它是如何工作的。<br>Logger, Handler, Formatter 和 Filter 是日志模块的几个基本概念，其工作原理也要从这四个基本概念说起。  </p><ul><li>Logger 记录器，提供日志相关功能的调用接口</li><li>Handler 处理器，将 (记录器产生的) 日志记录发送至合适的目的地。</li><li>Filter 过滤器，提供更好的粒度控制，可决定输出哪些日志记录。</li><li>Formatter 格式化器，指明最终输出中日志记录的格式</li></ul><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><h4 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h4><p>Logger 记录器，其对象实例是日志记录功能的载体，如 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger(<span class="string">'simple_example_name'</span>)</span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'info message'</span>)</span><br><span class="line">logger.warn(<span class="string">'warn message'</span>)</span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure><p>注意：Logger 对象从不直接实例化，而是通过模块级的功能 <em>logging.getLogger(name)</em> 来创建 Logger 实例。调用 <em>logging.getLogger(name)</em> 功能时，如果传入的 name 参数值相同，则总是返回同一个 Logger 对象实例的引用。</p><p>如果没有显式进行创建，则默认创建一个 root logger，并应用默认的日志级别 (WARN)、默认的处理器 Handler (StreamHandler, 即将日志信息打印输出到标准输出上)、和默认的格式化器 Formatter (默认的格式即为第一个简单使用程序中输出的格式，即 <em>warning level:instance name:warning message</em>)</p><h4 id="Handler"><a href="#Handler" class="headerlink" title="Handler"></a>Handler</h4><p>Handler 将日志信息发送到设定位置，可通过 Logger 对象的 <em>addHandler()</em> 方法为 Logger 对象添加 0 或多个 handler。日志的一种典型应用场景是：系统希望将所有的日志信息保存到 log 文件中，其中日志等级等于或高于 ERROR 的消息还要在屏幕标准输出上显示，日志等级为 CRITICAL 的还需要发送邮件通知；这种场景就需要 3 个独立的 handler 来实现需求，分别与指定的日志等级或日志位置做响应。</p><p>注意：为 Logger 配置的 handler 不能是 Handler 基类对象，而是 Handler 的子类对象。常用的 Handler 有 StreamHandler, FileHandler, 和 NullHandler。</p><h4 id="Formatter"><a href="#Formatter" class="headerlink" title="Formatter"></a>Formatter</h4><p>Formatter 用于设置日志输出的格式，与 Logger/Handler 不同，它可以直接初始化对象，即 <em>formatter=logging.Formatter(fmt=None, datefmt=None)</em>。创建时分别传入两个参数来修改日志格式和时间格式，默认的日志格式为 <em>%(asctime)s - %(levelname)s - %(message)s</em>, 默认的时间格式为 <em>%Y-%m-%d %H:%M:%S</em>.</p><h4 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h4><p>Filter 可用于 Logger 对象或 Handler 对象，用于提供比日志等级更加复杂的日志过滤方式。默认的 filter 只允许在指定 logger 层级下的日志消息通过过滤。<br>举个栗子，若把 filter 设置为 <em>filter=logging.Filter(‘A.B’)</em>, 则 logger ‘A.B’, ‘A.B.C’, ‘A.B.C.D’, ‘A.B.D’ 产生的日志信息可以通过过滤，但 ‘A.BB’, ‘B.A.B’ 均不行。若以空字符串初始化 filter ，则所有的日志消息都可以通过过滤。<br>Filter 在日志功能配置中是非必须的，只在对日志消息过滤需求比较复杂时配置使用即可。</p><h3 id="日志产生流程"><a href="#日志产生流程" class="headerlink" title="日志产生流程"></a>日志产生流程</h3><p>日志产生的流程逻辑参考图<br><img src="/images/2018-09/logging_flow.png" alt="avatar" height="95%" width="95%"></p><h3 id="日志模块的使用"><a href="#日志模块的使用" class="headerlink" title="日志模块的使用"></a>日志模块的使用</h3><p>日志模块使用的关键是“日志的配置”。配置好之后，只需调用 logger.INFO(), logger.ERROR() 等方法即可创建日志内容。</p><p>配置日志模块有三种方法：  </p><ol><li>在代码中显式创建 loggers, handlers, formatters 甚至 filters，并调用这几个对象中的各个配置函数来完成日志配置  </li><li>将配置信息写到配置文件中，然后读取配置文件信息来完成日志配置  </li><li>将配置信息写到一个字典 dict 中，然后读取这个配置字典来完成日志配置</li></ol><h4 id="代码配置和使用"><a href="#代码配置和使用" class="headerlink" title="代码配置和使用"></a>代码配置和使用</h4><p>通过代码配置日志模块胜在方便简单，但不推荐在大型项目中使用，因为修改配置就需要修改代码。<br>这种方法可帮助我们理解日志模块的工作原理，因此用作案例。  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建 Logger</span></span><br><span class="line"><span class="comment"># Create logger</span></span><br><span class="line">logger = logging.getLogger(<span class="string">'test'</span>)</span><br><span class="line"><span class="comment"># Set default log level</span></span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建 Handler</span></span><br><span class="line"><span class="comment"># Create console handler and set level to warn</span></span><br><span class="line">ch = logging.StreamHandler()</span><br><span class="line">ch.setLevel(logging.WARN)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 创建 Formatter</span></span><br><span class="line"><span class="comment"># Create formatter</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 配置 Logger</span></span><br><span class="line"><span class="comment"># add formatter to ch</span></span><br><span class="line">ch.setFormatter(formatter)</span><br><span class="line"><span class="comment"># add ch to logger</span></span><br><span class="line">logger.addHandler(ch)</span><br><span class="line"><span class="comment"># The final log level is the higher one between the default and the one in handler</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 使用日志模块</span></span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'info message'</span>)</span><br><span class="line">logger.warn(<span class="string">'warn message'</span>)</span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical message'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">## &gt;&gt;&gt; logger.debug('debug')</span></span><br><span class="line"><span class="comment">## &gt;&gt;&gt; logger.warn('warn')</span></span><br><span class="line"><span class="comment">## 2018-09-18 04:40:21,474 - test - WARNING - warn</span></span><br><span class="line"><span class="comment">## &gt;&gt;&gt; logger.critical('critical message')</span></span><br><span class="line"><span class="comment">## 2018-09-18 04:42:01,788 - test - CRITICAL - critical message</span></span><br><span class="line"><span class="comment">## &gt;&gt;&gt; </span></span><br><span class="line"></span><br><span class="line">ch2 = logging.FileHandler(<span class="string">'logger.log'</span>)</span><br><span class="line">ch2.setLevel(logging.INFO)</span><br><span class="line">ch2.setFormatter(formatter)</span><br><span class="line">logger.addHandler(ch2)</span><br><span class="line"><span class="comment"># 'application' code</span></span><br></pre></td></tr></table></figure><p>这个 logger.log 文件的写入是追加的，不是重新写入的形式。如这个例子中， logger.log 的文件内容是 (前三行是之前的测试内容):<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INFO:root:info</span><br><span class="line">ERROR:root:error</span><br><span class="line">WARNING:root:warn</span><br><span class="line"><span class="number">2018</span><span class="number">-09</span><span class="number">-18</span> <span class="number">04</span>:<span class="number">44</span>:<span class="number">33</span>,<span class="number">129</span> - test - INFO - info message</span><br></pre></td></tr></table></figure></p><h4 id="文件配置和使用"><a href="#文件配置和使用" class="headerlink" title="文件配置和使用"></a>文件配置和使用</h4><p>通过配置文件配置日志模块时，配置文件通常使用 <em>.ini</em> 格式，日志模块需要调用 <em>fileConfig</em> ，即 <em>logging.config.fileConfig(‘logging_config.ini’)</em> ，然后 logger 的使用方法同上。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"></span><br><span class="line">logging.config.fileConfig(<span class="string">'logging_config.ini'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create logger</span></span><br><span class="line">logger = logging.getLogger(<span class="string">'root'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'application' code</span></span><br><span class="line">logger.debug(<span class="string">'....'</span>)</span><br></pre></td></tr></table></figure><p>其中，<em>logging_config.ini</em> 文件内容为 </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[loggers]</span><br><span class="line"><span class="built_in">keys</span>=root,simpleExample</span><br><span class="line"></span><br><span class="line">[handlers]</span><br><span class="line"><span class="built_in">keys</span>=consoleHandler</span><br><span class="line"></span><br><span class="line">[formatters]</span><br><span class="line"><span class="built_in">keys</span>=simpleFormatter</span><br><span class="line"></span><br><span class="line">[logger_root]</span><br><span class="line">level=DEBUG</span><br><span class="line">handlers=consoleHandler</span><br><span class="line"></span><br><span class="line">[logger_simpleExample]</span><br><span class="line">level=INFO</span><br><span class="line">handlers=consoleHandler</span><br><span class="line">qualname=simpleExample</span><br><span class="line">propagate=<span class="number">0</span></span><br><span class="line"></span><br><span class="line">[handler_consoleHandler]</span><br><span class="line">class=StreamHandler</span><br><span class="line">level=DEBUG</span><br><span class="line">formatter=simpleFormatter</span><br><span class="line"><span class="keyword">args</span>=(sys.stdout,)</span><br><span class="line"></span><br><span class="line">[formatter_simpleFormatter]</span><br><span class="line">format=%(asctime)s - %(name)s - %(levelname)s - %(message)s</span><br></pre></td></tr></table></figure><p>通过配置文件配置日志模块，逻辑与代码中的配置一样，也是把 logger, handler 和 formatter 定义好，然后组装到一起。只是 ini 配置与代码配置的语法不通，可参考上例做相应修改。</p><h4 id="字典配置和使用"><a href="#字典配置和使用" class="headerlink" title="字典配置和使用"></a>字典配置和使用</h4><p>基于 Dict 对象配置日志模块在 Python 中应用广泛，很多 Django 或 Flask 项目都采用这种方式。以下是一个使用样例，可参考用于修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.config</span><br><span class="line"></span><br><span class="line">config = &#123;</span><br><span class="line">  <span class="string">'version'</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">'formatters'</span>: &#123;</span><br><span class="line">    <span class="string">'simple'</span>: &#123;</span><br><span class="line">      <span class="string">'format'</span>: <span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>, </span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'handlers'</span>: &#123;</span><br><span class="line">    <span class="string">'console'</span>: &#123;</span><br><span class="line">      <span class="string">'class'</span>: <span class="string">'logging.StreamHandler'</span>,</span><br><span class="line">      <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">      <span class="string">'formatter'</span>: <span class="string">'simple'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'file'</span>: &#123;</span><br><span class="line">      <span class="string">'class'</span>: <span class="string">'logging.FileHandler'</span>,</span><br><span class="line">      <span class="string">'filename'</span>: <span class="string">'logging.log'</span>,</span><br><span class="line">      <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">      <span class="string">'formatter'</span>: <span class="string">'simple'</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'loggers'</span>: &#123;</span><br><span class="line">    <span class="string">'root'</span>: &#123;</span><br><span class="line">      <span class="string">'handlers'</span>: [<span class="string">'console'</span>],</span><br><span class="line">      <span class="string">'level'</span>: <span class="string">'DEBUG'</span>,</span><br><span class="line">      <span class="comment"># 'propagate': True,</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'simple'</span>: &#123;</span><br><span class="line">      <span class="string">'handlers'</span>: [<span class="string">'console'</span>, <span class="string">'file'</span>],</span><br><span class="line">      <span class="string">'level'</span>: <span class="string">'WARN'</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logging.config.dictConfig(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'logger:'</span></span><br><span class="line">logger = logging.getLogger(<span class="string">'root'</span>)</span><br><span class="line"></span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'info message'</span>)</span><br><span class="line">logger.warn(<span class="string">'warn message'</span>)</span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical message'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">'logger2:'</span></span><br><span class="line">logger2 = logging.getLogger(<span class="string">'simple'</span>)</span><br><span class="line"></span><br><span class="line">logger2.debug(<span class="string">'debug message updated'</span>)</span><br><span class="line">logger2.info(<span class="string">'info message updated'</span>)</span><br><span class="line">logger2.warn(<span class="string">'warn message updated'</span>)</span><br><span class="line">logger2.error(<span class="string">'error message updated'</span>)</span><br><span class="line">logger2.critical(<span class="string">'critical message updated'</span>)</span><br></pre></td></tr></table></figure><h3 id="日志的严重等级"><a href="#日志的严重等级" class="headerlink" title="*日志的严重等级"></a>*日志的严重等级</h3><p>Log Level 如下，<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CRITICAL: <span class="number">50</span></span><br><span class="line">ERROR: <span class="number">40</span></span><br><span class="line">WARNING: <span class="number">30</span></span><br><span class="line">INFO: <span class="number">20</span></span><br><span class="line">DEBUG: <span class="number">10</span></span><br><span class="line">NOTSET: <span class="number">0</span></span><br></pre></td></tr></table></figure></p><p>等级包括 NOTSET, DEBUG, INFO, WARNING, ERROR, CRITICAL, 严重程度依次递增。</p><h1 id="Which-查阅"><a href="#Which-查阅" class="headerlink" title="Which: 查阅"></a>Which: 查阅</h1><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取logger实例，如果参数为空则返回root logger</span></span><br><span class="line">logger = logging.getLogger(<span class="string">"AppName"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定logger输出格式</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s %(levelname)-8s%: %(message)s'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件日志</span></span><br><span class="line">file_handler = logging.FileHandler(<span class="string">"test.log"</span>)</span><br><span class="line">file_handler.setFormatter(formatter)  <span class="comment"># 可以通过setFormatter指定输出格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 控制台日志</span></span><br><span class="line">console_handler = logging.StreamHandler(sys.stdout)</span><br><span class="line">console_handler.formatter = formatter  <span class="comment"># 也可以直接给formatter赋值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 为logger添加的日志处理器</span></span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line">logger.addHandler(console_handler)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定日志的最低输出级别，默认为WARN级别</span></span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出不同级别的log</span></span><br><span class="line">logger.debug(<span class="string">'this is debug info'</span>)</span><br><span class="line">logger.info(<span class="string">'this is information'</span>)</span><br><span class="line">logger.warn(<span class="string">'this is warning message'</span>)</span><br><span class="line">logger.error(<span class="string">'this is error message'</span>)</span><br><span class="line">logger.fatal(<span class="string">'this is fatal message, it is same as logger.critical'</span>)</span><br><span class="line">logger.critical(<span class="string">'this is critical message'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除一些日志处理器</span></span><br><span class="line">logger.removeHandler(file_handler)</span><br></pre></td></tr></table></figure><h2 id="格式化输出日志"><a href="#格式化输出日志" class="headerlink" title="格式化输出日志"></a>格式化输出日志</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式化输出</span></span><br><span class="line"></span><br><span class="line">service_name = <span class="string">"Booking"</span></span><br><span class="line">logger.error(<span class="string">'%s service is down!'</span> % service_name)   <span class="comment">#使用Python自带的字符串格式化，不推荐</span></span><br><span class="line">logger.error(<span class="string">'%s service is down!'</span>, service_name)   <span class="comment">#使用logger的格式化，推荐</span></span><br><span class="line">logger.error(<span class="string">'%s service is %s!'</span>, service_name, <span class="string">'down'</span>)   <span class="comment">#多参数格式化</span></span><br><span class="line">logger.error(<span class="string">'&#123;&#125; service is &#123;&#125;'</span>.format(service_name, <span class="string">'down'</span>)) <span class="comment">#使用format函数，推荐</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2018-09-18 21:11:34,493 ERROR   : Booking service is down!</span></span><br></pre></td></tr></table></figure><h2 id="记录异常信息"><a href="#记录异常信息" class="headerlink" title="记录异常信息"></a>记录异常信息</h2><p>当使用logging模块记录异常信息时，不需要传入该异常对象，直接调用 logger.error() 或 logger.exception() 就可以将当前异常记录下来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 记录异常信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="number">1</span> / <span class="number">0</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">  <span class="comment"># 等同于error级别，但是会额外记录当前抛出的异常堆栈信息</span></span><br><span class="line">  logger.exception(<span class="string">'this is an exception message'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2016-10-08 21:59:19,493 ERROR   : this is an exception message</span></span><br><span class="line"><span class="comment"># Traceback (most recent call last):</span></span><br><span class="line"><span class="comment">#   File "D:/Git/py_labs/demo/use_logging.py", line 45, in </span></span><br><span class="line"><span class="comment">#     1 / 0</span></span><br><span class="line"><span class="comment"># ZeroDivisionError: integer division or modulo by zero</span></span><br></pre></td></tr></table></figure><!-- <table border="1">  <tr>    <th> Value   </th><th> Meaning </th>  </tr>  <tr><td> %(name)s            </td><td> Logger 的名字 </td></tr>  <tr><td> %(levelno)s         </td><td> 数字形式的日志级别 </td>  </tr>  <tr><td> %(levelname)s       </td><td> 文本形式的日志级别 </td>  </tr>  <tr><td> %(message)s         </td><td> 用户输出的消息 </td>  </tr>  <tr>    <td> %(created)f         </td><td> 当前时间，用 UNIX 标准的表示时间的浮点数表示 </td>  </tr>  <tr>    <td> %(relativeCreated)d </td><td> 输出日志信息时的，自 Logger 创建以来的毫秒数 </td>  </tr>  <tr>    <td> %(asctime)s         </td>    <td> 字符串形式的当前时间。默认格式是 "2003-07-08 16:49:45,896"。逗号后面的是毫秒 </td>  </tr>  <tr>    <td> %(pathname)s        </td><td> 调用日志输出函数的模块的完整路径名，可能没有 </td>  </tr>  <tr><td> %(filename)s        </td><td> 调用日志输出函数的模块的文件名 </td></tr>  <tr>    <td> %(module)s          </td><td> 调用日志输出函数的模块名，filename 的名字部分 </td>  </tr>  <tr><td> %(funcName)s        </td><td> 调用日志输出函数的函数名 </td></tr>  <tr><td> %(lineno)d          </td><td> 调用日志输出函数的语句所在代码行 </td></tr>  <tr><td> %(thread)d          </td><td> 线程 ID ，可能没有 </td></tr>  <tr><td> %(threadName)s      </td><td> 线程名，可能没有 </td></tr>  <tr><td> %(process)d         </td><td> 进程 ID ，可能没有 </td></tr>  <tr><td> %(processName)s     </td><td> 进程名，可能没有 </td></tr></table>--><h2 id="修改日志消息的格式"><a href="#修改日志消息的格式" class="headerlink" title="修改日志消息的格式"></a>修改日志消息的格式</h2><p><strong>Formatter 日志格式</strong><br>Formatter 对象定义了 log 信息的结构和内容，构造时需要带两个参数：  </p><ul><li>一个是格式化的模板 fmt ，默认会包含最基本的 level 和 message 信息  </li><li>一个是格式化的时间样式 datefmt ，默认为 2003-07-08 16:49:45,896 (%Y-%m-%d %H:%M:%S)</li></ul><p>fmt 中允许使用的变量可参考下表  </p><table><thead><tr><th>Value</th><th>Meaning</th></tr></thead><tbody><tr><td>%(name)s</td><td>Logger 的名字</td></tr><tr><td>%(levelno)s</td><td>数字形式的日志级别</td></tr><tr><td>%(levelname)s</td><td>文本形式的日志级别</td></tr><tr><td>%(message)s</td><td>用户输出的消息</td></tr><tr><td>%(created)f</td><td>当前时间，用 UNIX 标准的表示时间的浮点数表示</td></tr><tr><td>%(relativeCreated)d</td><td>输出日志信息时的，自 Logger 创建以来的毫秒数</td></tr><tr><td>%(asctime)s</td><td>字符串形式的当前时间。默认格式是 “2003-07-08 16:49:45,896”。逗号后面的是毫秒</td></tr><tr><td>%(pathname)s</td><td>调用日志输出函数的模块的完整路径名，可能没有</td></tr><tr><td>%(filename)s</td><td>调用日志输出函数的模块的文件名</td></tr><tr><td>%(module)s</td><td>调用日志输出函数的模块名，filename 的名字部分</td></tr><tr><td>%(funcName)s</td><td>调用日志输出函数的函数名</td></tr><tr><td>%(lineno)d</td><td>调用日志输出函数的语句所在代码行</td></tr><tr><td>%(thread)d</td><td>线程 ID ，可能没有</td></tr><tr><td>%(threadName)s</td><td>线程名，可能没有</td></tr><tr><td>%(process)d</td><td>进程 ID ，可能没有</td></tr><tr><td>%(processName)s</td><td>进程名，可能没有</td></tr></tbody></table><h2 id="跌过的坑不要再爬一遍"><a href="#跌过的坑不要再爬一遍" class="headerlink" title="跌过的坑不要再爬一遍"></a>跌过的坑不要再爬一遍</h2><p>logging 全局设一个就够了，否则会重复输出</p><p>使用同名 logger 会拿到同一实例，这样可以实现跨模块调用同样的 logger 来记录日志；另外也可以通过日志名称来区分同一程序的不同模块。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://docs.python.org/2/library/logging.html#logrecord-attributes" target="_blank" rel="noopener">logging - Logging facility for Python</a><br><a href="https://docs.python.org/2/library/time.html#time.strftime" target="_blank" rel="noopener">time.strftime(format[, t])</a><br><a href="http://zhangzhk.com/2018/01/13/python-logging-module/" target="_blank" rel="noopener">Python 中 Logging 模块使用方法</a><br><a href="https://blog.csdn.net/chosen0ne/article/details/7319306" target="_blank" rel="noopener">Python日志输出——logging模块</a><br><a href="https://www.cnblogs.com/yyds/p/6901864.html" target="_blank" rel="noopener">Python之日志处理(logging模块)</a><br><a href="http://www.codebelief.com/article/2017/05/python-logging-module-tutorial/" target="_blank" rel="noopener">Python logging 模块使用指南</a>  </p>]]></content>
      
      <categories>
          
          <category> Programming </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>签证和护照的那些事儿</title>
      <link href="/2018/2018-09-12-Passport-and-Visa/"/>
      <url>/2018/2018-09-12-Passport-and-Visa/</url>
      <content type="html"><![CDATA[<h1 id="护照-Passport"><a href="#护照-Passport" class="headerlink" title="护照 (Passport)"></a>护照 (Passport)</h1><p>申领后具有十年有效期，申请签证前一般要保持六个月以上的有效期。</p><p><strong>Telecode Name</strong>: <a href="https://apps.chasedream.com/chinese-commercial-code/" target="_blank" rel="noopener">标准中文电码(Chinese Commercial Code)查询</a></p><p><strong>Passport/Travel Document Type</strong>: 姓名上方，P 代表 Regular<br><strong>Passport/Travel Document Number</strong>: E开头或EB开头，后跟阿拉伯数字<br><strong>Passport Book Number</strong>: 将护照横过来看，一串小字，均为阿拉伯数字<br>在护照首页的右边，数字是纵向的，数字的字体也比其他的小<br><img src="http://file.ailvxing.com/p/201505/f440596072deee9ad67616ac06d575e1.jpg" alt="Passport Book Number" title="Passport Book Number" width="380" height="380"></p><p>ref:<br><a href="http://bbs.tigtag.com/thread-555119-1-2.html" target="_blank" rel="noopener">DS-160表格中 Passport book number (护照本编号) 填写指南</a><br><a href="https://www.zhihu.com/question/19732605" target="_blank" rel="noopener">美国旅行签证160表格里 Passport Book Number 应该填写什么</a><br><a href="http://www.ailvxing.com/info-103-22538-0.html" target="_blank" rel="noopener">如何填写美国B1-B2申请表（DS-160）</a></p>]]></content>
      
      <categories>
          
          <category> Abroad </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Procedures </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo + NexT + GitHub Pages = xxxx.github.io</title>
      <link href="/2018/2018-07-14-Hexo-NexT/"/>
      <url>/2018/2018-07-14-Hexo-NexT/</url>
      <content type="html"><![CDATA[<h1 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h1><h2 id="Git-相关"><a href="#Git-相关" class="headerlink" title="Git 相关"></a>Git 相关</h2><p><strong>Git</strong> 是一个开源的分布式版本控制系统，可以有效且高速地处理从很小到非常大的项目管理。<br><strong>GitHub</strong> 是一个面向开源及私有软件项目的托管平台，只支持 git 作为唯一的版本库格式进行托管。<br><strong>Github Pages</strong> 是面向用户、组织和项目开放的公共静态页面搭建托管服务，站点可以被免费托管在 Github 上。可以选择使用 Github Pages 默认提供的域名 github.io 或者自定义域名来发布站点。支持自动利用 Jekyll 生成站点，也同样支持纯 HTML 文档。</p><p><em>其它代码托管平台</em>：  </p><ul><li>Google Open Source  <a href="https://code.google.com/" target="_blank" rel="noopener">Google Code</a>  </li><li>GitLab <a href="https://about.gitlab.com/" target="_blank" rel="noopener">https://about.gitlab.com/</a>  </li></ul><p>参考<br><a href="https://www.jianshu.com/p/bd24f3202011" target="_blank" rel="noopener">收藏|国内外代码托管平台汇总</a><br><a href="https://blog.csdn.net/whaxrl/article/details/50773460" target="_blank" rel="noopener">常见的 Git 代码托管平台有哪些</a><br><a href="https://www.zhihu.com/question/19573222" target="_blank" rel="noopener">GitHub 的替代产品有哪些？</a></p><h2 id="博客生成器"><a href="#博客生成器" class="headerlink" title="博客生成器"></a>博客生成器</h2><p>博客生成器用来解决网页编写的问题。一般分为静态和动态两种。  </p><p>主要区别：  </p><ul><li><strong>资源占用</strong>上，静态的相比动态占用服务器资源少，还可以托管在Github Pages上；  </li><li><strong>发布更新操作</strong>上，由于静态博客没有管理后台，所以发布更新内容要比动态博客繁琐；  </li><li><strong>访问速度</strong>上，由于静态博客没有数据库，所以访问速度更快；  </li><li><strong>安全性</strong>上，静态博客相比动态博客免疫了很多Web攻击套路。  </li></ul><p>典型代表：  </p><ul><li>静态：Hexo、Jekyll、Octopress、Hugo等；  </li><li>动态：WordPress、FarBox、Ghost等。  </li></ul><p>Official:<br><a href="http://jekyllcn.com/docs/home/" target="_blank" rel="noopener">Jekyll 文档</a><br><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo 文档</a>  </p><p>参考<br><a href="https://zhuanlan.zhihu.com/p/25744686" target="_blank" rel="noopener">搭建个人博客，你需要知道这些</a><br><a href="https://my.oschina.net/xudadi811/blog/747233" target="_blank" rel="noopener">常用6大静态博客系统</a><br><a href="https://www.v2ex.com/t/154179" target="_blank" rel="noopener">静态博客生成器 OR 动态博客？</a><br><a href="http://fallenwood.github.io/2016/04/29/web-from-tcp-socket/" target="_blank" rel="noopener">动态博客和静态博客-从Tcp-socket谈起(dev)</a>  </p><h1 id="Hexo-NexT-GithubPages"><a href="#Hexo-NexT-GithubPages" class="headerlink" title="Hexo + NexT + GithubPages"></a>Hexo + NexT + GithubPages</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Hexo 是一个快速、简洁且高效的博客框架，基于 Node.js，使用 Markdown (或其他渲染引擎) 解析文章，在几秒内即可利用不同主题生成静态网页。</p><p>### <strong>前提条件</strong></p><ul><li>Git  </li><li>Node.js <a href="https://eustomaqua.github.io/2018/2018-05-02-database-sublime-nodejs/">安装</a>  </li></ul><p>### <strong>安装指示</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure><p><strong>其他插件</strong></p><p>安装框架</p><ol><li>进行 Hexo 框架的基本安装  <blockquote><p>$ npm install hexo-cli -g</p></blockquote></li></ol><p>安装插件</p><ol><li><p>安装便于自动部署到 GitHub 上的插件  </p><blockquote><p>$ npm install hexo-deployer-git –save</p></blockquote></li><li><p>安装 atom 生成插件，便于感兴趣的小伙伴们订阅  </p><blockquote><p>$ npm install hexo-generator-feed –save</p></blockquote></li><li><p>安装博客索引生成插件  </p><blockquote><p>$ npm install hexo-generator-index –save</p></blockquote></li><li><p>安装归档生成插件  </p><blockquote><p>$ npm install hexo-generator-archive –save</p></blockquote></li><li><p>安装 tag 生成插件  </p><blockquote><p>$ npm install hexo-generator-tag –save</p></blockquote></li><li><p>安装 category 生成插件  </p><blockquote><p>$ npm install hexo-generator-category –save</p></blockquote></li><li><p>安装 Sitemap 文件生成插件  </p><blockquote><p>$ npm install hexo-generator-sitemap –save</p></blockquote></li><li><p>安装百度 Sitemap 文件生成插件，因为普通的 Sitemap 格式不符合百度的要求  </p><blockquote><p>$ npm install hexo-generator-baidu-sitemap –save</p></blockquote></li></ol><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>初始化博客<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建文件夹，命名为 xxxx</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir hexo-next</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> hexo-next</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在目标文件夹下建立博客需要的所有文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo init</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进行依赖包安装</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo npm install</span></span><br></pre></td></tr></table></figure></p><p>初始化完成后，目录下会生成以下文件：  </p><ul><li>scaffolds/ : 脚手架，用于存放创建文章时的模版  </li><li>source/     : 用于存放用 markdown 编写的博文原文件、其他静态资源文件  </li><li>themes/    : 用于存放主题，里面有博客的默认主题 landscape  </li><li>_config.yml : Hexo和站点的配置文件，里面可以设置博客的名字、标题、作者、链接格式等相关项</li></ul><p>依赖包安装执行成功后，目录下增加：  </p><ul><li>node_modules : 关联保存了将会使用到的 hexo 依赖包</li></ul><p><img src="/images/2018-07/14_hexo_img1.png" height="60%" width="60%"></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在 Hexo 中有两份主要的配置文件，其名称都是<font color="Aquamarine"> _config.yml</font> 。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。</p><p>为了描述方便，在以下说明中，将前者称为 <font color="Blue"><strong>站点配置文件</strong></font>， 后者称为 <font color="BlueViolet"><strong>主题配置文件</strong></font>。</p><h3 id="站点自定义配置"><a href="#站点自定义配置" class="headerlink" title="站点自定义配置"></a>站点自定义配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Site      站点配置: 标题、副标题、网站描述、作者、使用语言</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> URL       网址配置：修改 github.io ; permalink 中去掉 <span class="string">":month/:day/"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Extensions</span></span><br><span class="line">theme: next     # 主题设置，默认为 landscape</span><br><span class="line"><span class="meta">#</span><span class="bash"> Deployment </span></span><br><span class="line">deploy:         # 部署配置</span><br><span class="line">  type:         # 设置发布类型，如 git, rsync</span><br></pre></td></tr></table></figure><h3 id="主题更换"><a href="#主题更换" class="headerlink" title="主题更换"></a>主题更换</h3><p>只需将主题文件拷贝至站点目录的 <font color="Aquamarine">themes</font> 目录下，然后修改站点配置文件中的 theme 即可。</p><p><a href="https://github.com/theme-next/hexo-theme-next" target="_blank" rel="noopener">NexT 主题下载</a><br><a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="noopener">NexT 旧版</a>  </p><h3 id="主题自定义配置"><a href="#主题自定义配置" class="headerlink" title="主题自定义配置"></a>主题自定义配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">scheme: Pisces  # 外观</span><br><span class="line"><span class="meta">#</span><span class="bash">               <span class="comment"># Muse - 默认，黑白主调，大量留白</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">               <span class="comment"># Mist - Muse 的紧凑版本，整洁有序的单栏外观</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">               <span class="comment"># Pisces - 双栏 Scheme，小家碧玉式清新</span></span></span><br><span class="line"></span><br><span class="line">language: zh-Hans # 语言： 站点配置文件，简体中文</span><br><span class="line"></span><br><span class="line">menu:           # 菜单</span><br><span class="line"><span class="meta">#</span><span class="bash">               <span class="comment"># 设定菜单内容，设置格式为 "item name； link"。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">               <span class="comment"># 其中前者是个名称，不直接显示在页面上，只用于匹配图标及翻译。</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">               <span class="comment"># 若站点运行在子目录中，将链接前缀的 "/" 去掉</span></span></span><br><span class="line"></span><br><span class="line">sidebar:        # 侧栏/侧边栏</span><br><span class="line">  position:     # 位置</span><br><span class="line">  display:      # 显示时机，默认 post</span><br><span class="line"><span class="meta">  #</span><span class="bash">             <span class="comment"># post - 默认，在文章页面 (拥有目录列表) 时显示</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash">             <span class="comment"># always - 在所有页面中都显示</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash">             <span class="comment"># hide - 在所有页面中都隐藏 (可以手动展开)</span></span></span><br><span class="line"><span class="meta">  #</span><span class="bash">             <span class="comment"># remove - 完全移除</span></span></span><br><span class="line"></span><br><span class="line">avatar:         # 头像</span><br><span class="line"><span class="meta">#</span><span class="bash">               <span class="comment"># (1) http://example.com/avatar.png</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">               <span class="comment"># (2) 放置 source/uploads 下，目录若不存在则新建</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">               <span class="comment"># (3) 放置 source/images 下，配置 /images/avatar.png</span></span></span><br></pre></td></tr></table></figure><h3 id="备注："><a href="#备注：" class="headerlink" title="备注："></a>备注：</h3><p>站点配置文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Hexo Configuration</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Docs: https://hexo.io/docs/configuration.html</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Source: https://github.com/hexojs/hexo/</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Site        站点配置</span></span><br><span class="line">title:        # 站点名字，也就是html的title，会显示在浏览器标签上。</span><br><span class="line">subtitle:     # 站点副标题，会显示在首页上，可以不填。</span><br><span class="line">description:  # 站点描述，可以不填。</span><br><span class="line">author:       # 网站作者</span><br><span class="line">language:     # 使用语言</span><br><span class="line">timezone:     # 站点时区，默认是电脑时间</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> URL         网址配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span></span><br><span class="line">url:          # 站点网址</span><br><span class="line">root: /       # 站点根目录</span><br><span class="line"><span class="meta">#</span><span class="bash">             <span class="comment"># 如果网址是次级目录，比如：http://example.com/blog，</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">             <span class="comment"># 那么就要设置`url`为`http://example.com/blog`，并且`root`要设置为`/blog/`</span></span></span><br><span class="line">permalink: :year/:title/  # 文章的永久网址链接，默认是:year/:month/:day/:title/，。</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Directory           <span class="comment"># 目录配置：</span></span></span><br><span class="line">source_dir: source    # 资源文件夹，存放内容，如用 md 编写的博文</span><br><span class="line">public_dir: public    # 公共文件夹，存放生成的静态网页文件，默认值为public</span><br><span class="line">tag_dir: tags             # 标签文件夹</span><br><span class="line">archive_dir: archives     # 归档文件夹</span><br><span class="line">category_dir: categories  # 分类文件夹</span><br><span class="line">code_dir: downloads/code  # Include code 文件夹</span><br><span class="line">i18n_dir: :lang           # 国际化 (i18n) 文件夹</span><br><span class="line"><span class="meta">#</span><span class="bash">                         <span class="comment"># 跳过指定文件的渲染，可使用 glob 来配置路径</span></span></span><br><span class="line">skip_render: baidu_verify_j461ONwJ3o.html   # 不想被渲染的路径</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Writing                 <span class="comment"># 文章写作配置 </span></span></span><br><span class="line">new_post_name: :year-:month-:day-:title.md # File name of new posts</span><br><span class="line">default_layout: post      # 预设布局</span><br><span class="line">titlecase: false          # Transform title into titlecase (单词首字母大写)</span><br><span class="line">external_link: true       # Open external links in new tab 新标签中打开链接</span><br><span class="line">filename_case: 0          # 转换文件名，1代表小写；2代表大写；默认为0，表示不变，意思就是创建文章的时候，是否自动帮你转换文件名，默认就行，</span><br><span class="line">render_drafts: false      # 显示草稿。是否渲染_drafts目录下的文章，默认为false</span><br><span class="line">post_asset_folder: false  # 是否启用Asset Folder，默认为false</span><br><span class="line">relative_link: false      # 把链接改为与根目录的相对位置</span><br><span class="line">future: true              # 是否显示未来日期文章，默认为true</span><br><span class="line">highlight:                # 代码块设置</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: true #是否显示行号</span><br><span class="line">  auto_detect: true #代码自动高亮</span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Home page setting</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> path: Root path <span class="keyword">for</span> your blogs index page. (default = <span class="string">''</span>)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> per_page: Posts displayed per page. (0 = <span class="built_in">disable</span> pagination)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line">index_generator:</span><br><span class="line">  path: ''</span><br><span class="line">  per_page: 10</span><br><span class="line">  order_by: -date</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Category &amp; Tag            分类和标签的设置</span></span><br><span class="line">default_category: uncategorized   # 默认未分类</span><br><span class="line">category_map:               # 分类别名</span><br><span class="line">tag_map:                    # 标签别名</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Date / Time format        日期和时间格式配置：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Hexo uses Moment.js to parse and display date</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># You can customize the date format as defined in</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># http://momentjs.com/docs/#/displaying/format/</span></span></span><br><span class="line">date_format: YYYY-MM-DD     # 日期格式</span><br><span class="line">time_format: HH:mm:ss       # 时间格式</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Pagination                分页设置：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Set per_page to 0 to disable pagination</span></span></span><br><span class="line">per_page: 10                # 每页显示的文章数量，0 为禁止分页</span><br><span class="line">pagination_dir: page        # 分页目录</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Extensions                扩展配置：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Plugins: https://hexo.io/plugins/</span></span></span><br><span class="line">Plugins:</span><br><span class="line">- hexo-generator-sitemap</span><br><span class="line"><span class="meta">#</span><span class="bash">- hexo-generator-feed</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Feed Atom</span></span><br><span class="line"><span class="meta">#</span><span class="bash">feed:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  <span class="built_in">type</span>: atom</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  path: atom.xml</span></span><br><span class="line"><span class="meta">#</span><span class="bash">  <span class="built_in">limit</span>: 20</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 自动生成sitemap</span></span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">  path: baidusitemap.xml</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Themes: https://hexo.io/themes/主题配置</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> maupassant  next yilia jacman</span></span><br><span class="line">theme: next</span><br><span class="line"><span class="meta">#</span><span class="bash"> Deployment 部署配置，将本地public目录也就是网站部署到服务器上的配置</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Docs: https://hexo.io/docs/deployment.html</span></span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/username/username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><h3 id="GitHub-配置"><a href="#GitHub-配置" class="headerlink" title="GitHub 配置"></a>GitHub 配置</h3><ol><li>注册 GitHub  </li><li><p>添加 SSH Key  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1) 检查终端是否已存在 SSH Key</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如已存在，会出现文件 id_rsa, id_rsa.pub, 此时可直接跳到第3步</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls -al ~/.ssh</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2) 执行命令生成 SSH Key</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 推荐使用默认配置，故接下来的提示 ↓ , 直接按 Enter 键即可</span></span><br><span class="line">Enter file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]`</span><br><span class="line">Enter passphrase (empty for no passphrase): [Type a passphrase]</span><br><span class="line"><span class="meta">#</span><span class="bash"> Enter same passphrase again: [Type passphrase again]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3) 添加 SSH Key 到 ssh-agent 中</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh-add ~/.ssh/id_rsa</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 4) 复制 SSH Key 到 剪贴板 中</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="string">'pbcopy/clip'</span> &lt; ~/.ssh/id_rsa.pub  <span class="comment">#这俩命令都没安装</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat ~/.ssh/id_rsa.pub              <span class="comment">#所以直接显示到终端，然后再复制</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者 cat &lt; ~/.ssh/id_rsa.pub</span></span><br></pre></td></tr></table></figure></li><li><p>添加 SSH Key 到 GitHub 账户中  </p><blockquote><p>Setting -&gt; SSH Keys -&gt; Add SSH Key -&gt; 填入 Title, Key -&gt; Add Key 保存  </p></blockquote></li><li><p>验证 SSH Key 是否添加成功  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh -T git@github.com</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行时终端会提示如下内容，直接输入 yes 即可</span></span><br><span class="line">The authenticity of host 'github.com (207.97.227.239)' can't be established.</span><br><span class="line">RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加成功后，终端会输出</span></span><br><span class="line">Hi username! You've successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></li><li><p>新建 Repository  </p><blockquote><p>命名必须遵循规范：  username.github.io  </p></blockquote></li></ol><h3 id="Hexo-配置"><a href="#Hexo-配置" class="headerlink" title="Hexo 配置"></a>Hexo 配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1) hexo-deployer-git 组件安装</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2) 配置 deploy 插件： 站点配置文件 _config.yml</span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/username/username.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  message: updated at &#123;&#123; now("YYYY-MM-DD HH:mm:ss") &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="Hexo-发布"><a href="#Hexo-发布" class="headerlink" title="Hexo 发布"></a>Hexo 发布</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1) 生成博客的静态页面</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g  <span class="comment"># 等同于 hexo generate , g 是缩写</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2) 将生成的静态页面上传到 GitHub</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d  <span class="comment"># 等同于 hexo deploy , d 是缩写</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 浏览器访问 username.github.io</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以后添加新博客，可按 1,2 步生成静态页面、部署到 GitHub 上即可</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如遇到一些资源不对或其他问题，可尝试清除已生成的静态文件，再重新执行 1,2 步</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo clean  <span class="comment">#同时删除根目录下的 db.json</span></span></span><br></pre></td></tr></table></figure><h3 id="Hexo-本地调试"><a href="#Hexo-本地调试" class="headerlink" title="Hexo 本地调试"></a>Hexo 本地调试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo s  <span class="comment"># hexo server, 启动服务器, 默认访问网站 http://localhost:4000/</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s --debug  <span class="comment"># 调试模式</span></span></span><br></pre></td></tr></table></figure><p>重新进行本地部署时，可能需要<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> lsof -i :4000</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">kill</span> -9 pid</span></span><br></pre></td></tr></table></figure></p><h2 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h2><h3 id="markdown-编辑"><a href="#markdown-编辑" class="headerlink" title="markdown 编辑"></a>markdown 编辑</h3><p>字体、字号和颜色<br>size 规定文本的尺寸大小。可选值：数字1-7，浏览器默认为3.<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">"微软雅黑"</span>&gt;</span>微软雅黑<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">grey</span> <span class="attr">size</span>=<span class="string">7</span>&gt;</span>颜色<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>背景色<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">orange</span>&gt;</span>橙黄<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>颜色名列表 参见第二个：<br><a href="https://blog.csdn.net/u010177286/article/details/50358720" target="_blank" rel="noopener">Markdown使用技巧总结——字体，颜色，字号，背景，首行缩进等</a><br><a href="https://blog.csdn.net/testcs_dn/article/details/45719357/" target="_blank" rel="noopener">CSDN-markdown编辑器语法——字体、字号与颜色</a>  </p><p>另附参考：<br><a href="https://www.jianshu.com/p/0b027c877a0d" target="_blank" rel="noopener">table以及td宽度设置细节</a><br><a href="http://www.divcss5.com/html/h331.shtml" target="_blank" rel="noopener">html <b>加粗与<strong>加粗标签区别</strong></b></a>  </p><h3 id="NexT-自定义配置"><a href="#NexT-自定义配置" class="headerlink" title="NexT 自定义配置"></a>NexT 自定义配置</h3><h4 id="本地-站内搜索"><a href="#本地-站内搜索" class="headerlink" title="本地/站内搜索"></a>本地/站内搜索</h4><p><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2" target="_blank" rel="noopener">自定义站内搜索</a><br><a href="https://zty.js.org/post/2016/07/08/hexo-localsearch.html" target="_blank" rel="noopener">实现 Hexo next 主题博客本地站内搜索</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 hexo-generator-searchdb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-generator-search --save</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在站点的 _config.yml 中增加</span></span><br><span class="line"></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></p><h4 id="侧边栏社交链接"><a href="#侧边栏社交链接" class="headerlink" title="侧边栏社交链接"></a>侧边栏社交链接</h4><p><a href="https://github.com/iissnan/hexo-theme-next/wiki/%E8%AE%BE%E7%BD%AE%E4%BE%A7%E8%BE%B9%E6%A0%8F%E7%A4%BE%E4%BA%A4%E9%93%BE%E6%8E%A5" target="_blank" rel="noopener">设置侧边栏社交链接</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编辑站点的 _config.yml , 新增字段 social ，然后添加社交站点名称与地址即可</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Social links</span></span><br><span class="line">social:</span><br><span class="line">  GitHub: https://github.com/username</span><br><span class="line">  Twitter: https://twitter.com/username</span><br><span class="line">  Weibo: http://weibo.com/username</span><br><span class="line">  douban: http://douban.com/people/username</span><br><span class="line">  zhihu: http://www.zhihu.com/people/username</span><br><span class="line"><span class="meta">  #</span><span class="bash"> etc.</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑主题的 _config.yml , 在 social_icons 字段下添加社交站点名称 (注意大小写) 与图标</span></span><br><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta">  #</span><span class="bash"> Icon Mappings.</span></span><br><span class="line"><span class="meta">  #</span><span class="bash"> KeyMapsToSocalItemKey: NameOfTheIconFromFontAwesome</span></span><br><span class="line">  GitHub: github</span><br><span class="line">  Twitter: twitter</span><br><span class="line">  Weibo: weibo</span><br><span class="line">  Linkedin: linkedin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 图标名称可参考 [http://fontawesome.io/cheatsheet/](http://fontawesome.io/cheatsheet/)</span></span><br></pre></td></tr></table></figure></p><h4 id="文章摘要-文章截断-阅读全文"><a href="#文章摘要-文章截断-阅读全文" class="headerlink" title="文章摘要/文章截断(阅读全文)"></a>文章摘要/文章截断(阅读全文)</h4><p><a href="https://theme-next.iissnan.com/faqs.html" target="_blank" rel="noopener">如何设置 「阅读全文」？</a><br><a href="https://github.com/iissnan/hexo-theme-next/issues/62" target="_blank" rel="noopener">请问如何设置 read more?</a><br><a href="http://litten.me/" target="_blank" rel="noopener">Litten 的博客</a><br><a href="https://lfkid.github.io/2016/11/16/Hexo%E6%95%99%E7%A8%8B%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89%E4%BD%BF%E7%94%A8Hexo%E5%86%99%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">Hexo教程：（三）使用Hexo写博客</a><br>在想显示为摘要的内容之后添加即可<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1) 文章中使用，手动截断。Hexo 推荐</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    除了可以精确控制需要显示的摘录内容以外，也可以让 Hexo 中的插件更好地识别</span></span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 2) 自动形成摘要，在主题配置文件中添加</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    默认截取长度为 150 字符，可根据需要自行设定</span></span><br><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure></p><h4 id="修改-um-为-ok"><a href="#修改-um-为-ok" class="headerlink" title="修改 um 为 ok"></a>修改 um 为 ok</h4><p>这个是隐藏成就系统，是按发表篇幅来确定显示的是什么字符的。<br>但是可以修改不同层级的描述文字，如下所示。  </p><p><a href="http://wellliu.com/page/3/" target="_blank" rel="noopener">we new</a><br><a href="http://wellliu.com/2016/12/29/Blog%E9%9A%90%E8%97%8F%E6%88%90%E5%B0%B1%E7%B3%BB%E7%BB%9F/" target="_blank" rel="noopener">Blog 隐藏成就系统</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改 themes/next/languages/zh-Hans.yml</span></span><br><span class="line">cheers:</span><br><span class="line">  um: Evil Queen</span><br><span class="line">  ok: Madam Mayor</span><br><span class="line">  nice: Regina</span><br><span class="line">  good: Roni</span><br><span class="line">  great: Good Queen</span><br><span class="line">  excellent: Emma Swan</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 达成成就的条件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改 themes/next/layout/archive.swig</span></span><br><span class="line">if   posts_length &gt; 210, set cheers = 'excellent'</span><br><span class="line">elif posts_length &gt; 130, set cheers = 'great'</span><br><span class="line">elif posts_length &gt;  80, set cheers = 'good'</span><br><span class="line">elif posts_length &gt;  50, set cheers = 'nice'</span><br><span class="line">elif posts_length &gt;  30, set cheers = 'ok'</span><br><span class="line">else                   , set cheers = 'um'</span><br></pre></td></tr></table></figure><h4 id="超链接的展示样式"><a href="#超链接的展示样式" class="headerlink" title="超链接的展示样式"></a>超链接的展示样式</h4><p>修改文章内超链接文本样式为淡蓝色<br><a href="http://blog.junyu.io/posts/0010-hexo-learn-from-Never-yu.html" target="_blank" rel="noopener">Hexo博客设置进阶</a><br>修改 themes\next\source\css_custom\custom.styl ，添加如下 css 样式语句：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#0477ab</span>;</span><br><span class="line">    <span class="selector-tag">text-decoration</span>: <span class="selector-tag">underline</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="返回顶部按钮"><a href="#返回顶部按钮" class="headerlink" title="返回顶部按钮"></a>返回顶部按钮</h4><p>阅读百分比<br><a href="https://github.com/iissnan/hexo-theme-next/issues/1742" target="_blank" rel="noopener">返回顶部按钮跟那个百分比怎么实现的</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Scroll percent label <span class="keyword">in</span> b2t buttom</span></span><br><span class="line">scrollpercent: true</span><br></pre></td></tr></table></figure></p><p>显示位置默认在底部，换到侧边栏上<br><a href="https://github.com/iissnan/hexo-theme-next/issues/1906" target="_blank" rel="noopener">b2t button display in a wrong position，回到顶部按钮显示位置不对</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Back to top <span class="keyword">in</span> siderbar (only <span class="keyword">for</span> Pisces | Gemini).</span></span><br><span class="line">b2t: true</span><br></pre></td></tr></table></figure></p><h4 id="单篇字数统计和阅读时长"><a href="#单篇字数统计和阅读时长" class="headerlink" title="单篇字数统计和阅读时长"></a>单篇字数统计和阅读时长</h4><p><a href="https://www.jianshu.com/p/baea8c95e39b" target="_blank" rel="noopener">Hexo添加字数统计、阅读时长</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 hexo-wordcount 插件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm i --save hexo-wordcount</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改主题配置文件</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Post wordcount display settings</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Dependencies: https://github.com/willin/hexo-wordcount</span></span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  wordcount: true         # 单篇 字数统计</span><br><span class="line">  min2read: true          # 单篇 阅读时长</span><br><span class="line">  totalcount: false       # 网站 字数统计</span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure></p><p><a href="https://eason-yang.com/2016/11/05/add-word-count-to-hexo-next/" target="_blank" rel="noopener">为Hexo NexT主题添加字数统计功能</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 修改配置文件，站点与主题配置文件均可</span></span><br><span class="line">word_count: true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改主题 swig 布局</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 修改 themes/next/layout/_macro/post.swig</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 在 class 为 "post-meta" 的 div 中添加如下内容</span></span></span><br></pre></td></tr></table></figure></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.word_count %&#125;</span><br><span class="line">  &lt;span class="post-letters-count"&gt;</span><br><span class="line">    &amp;nbsp; | &amp;nbsp;</span><br><span class="line">    &lt;span title="&#123;&#123; __('post.wordcount') &#125;&#125;"&gt;</span><br><span class="line">      &#123;&#123; wordcount(post.content) &#125;&#125; words</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">    &amp;nbsp; | &amp;nbsp;</span><br><span class="line">    &lt;span title="&#123;&#123; __('post.min2read') &#125;&#125;"&gt;</span><br><span class="line">      &#123;&#123; min2read(post.content) &#125;&#125; minutes</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><h1 id="Previously"><a href="#Previously" class="headerlink" title="Previously"></a>Previously</h1><p>我最初的博客版本并没有用 Hexo，而是直接 git 提交后通过网页查看。  </p><ul><li>想查看效果必须多次提交，很不方便，而且 .git 太多也占空间；  </li><li>且目录多了显示不全；代码行号无法显示；  </li><li>并且不能使用如 &lt;img> 等语句；不能改变字体颜色和背景色。  </li></ul><p>这种方式可参考<br><a href="https://github.com/Simpleyyt/jekyll-theme-next" target="_blank" rel="noopener">Simpleyyt/jekyll-theme-next</a><br><a href="https://github.com/Simpleyyt/simpleyyt.github.io" target="_blank" rel="noopener">Simpleyyt/simpleyyt.github.io</a>  </p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>Official:<br><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">Hexo Docs</a><br><a href="https://hexo.io/zh-cn/docs/commands.html" target="_blank" rel="noopener">Hexo Commands</a><br><a href="https://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">NexT Beginner</a><br><a href="https://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">NexT Theme</a><br><a href="https://theme-next.iissnan.com/third-party-services.html" target="_blank" rel="noopener">NexT Third Party</a><br><a href="https://theme-next.iissnan.com/faqs.html" target="_blank" rel="noopener">NexT FAQs</a>  </p><p>Blogs’ examples:<br><a href="http://www.cnblogs.com/xiaoxuetu/p/hexo-guide.html" target="_blank" rel="noopener">利用Hexo搭建个人博客－博客初始化篇</a><br><a href="http://xiaoxuetu.github.io/2015/08/29/hexo-mac-environment/" target="_blank" rel="noopener">利用Hexo搭建个人博客－环境搭建篇</a><br><a href="http://xiaoxuetu.github.io/2015/08/31/hexo-guide/" target="_blank" rel="noopener">利用Hexo搭建个人博客－博客初始化篇</a><br><a href="http://xiaoxuetu.github.io/2015/09/06/hexo-issue/" target="_blank" rel="noopener">利用Hexo搭建个人博客－博客发布篇</a>  </p><p><a href="http://www.mashangxue123.com/Hexo/982564298.html" target="_blank" rel="noopener">Hexo 系列之 _config.yml站点配置文件</a><br><a href="https://www.jianshu.com/p/b97464622a01" target="_blank" rel="noopener">Hexo+GitHub+Next主题搭建个人博客</a><br><a href="https://lfkid.github.io/2016/11/16/Hexo%E6%95%99%E7%A8%8B%EF%BC%9A%EF%BC%88%E5%9B%9B%EF%BC%89%E5%B0%86%E6%9C%AC%E5%9C%B0Hexo%E7%AB%99%E7%82%B9%E9%83%A8%E7%BD%B2%E5%88%B0GitHubPages/" target="_blank" rel="noopener">Hexo教程：（四）将本地Hexo站点部署到GitHubPages</a><br><a href="https://www.jianshu.com/p/c1abb25aa8c7" target="_blank" rel="noopener">hexo搭建个人博客</a><br><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">打造个性超赞博客Hexo+NexT+GithubPages的超深度优化</a><br><a href="https://neveryu.github.io/2016/09/30/hexo-next-two/" target="_blank" rel="noopener">Hexo-NexT搭建个人博客（二）</a>  </p>]]></content>
      
      <categories>
          
          <category> Records </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Configure </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git, Markdown, Linux, Vim 常用命令汇总</title>
      <link href="/2018/2018-07-08-Git-Markdown-Linux-Vim/"/>
      <url>/2018/2018-07-08-Git-Markdown-Linux-Vim/</url>
      <content type="html"><![CDATA[<h1 id="Git-amp-GitHub"><a href="#Git-amp-GitHub" class="headerlink" title="Git &amp; GitHub"></a>Git &amp; GitHub</h1><h2 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h2><p>### <strong>git 为不同的项目设置不同的用户名</strong> </p><p>ref: <a href="https://blog.csdn.net/xiaoliu665114/article/details/66969957" target="_blank" rel="noopener">git为不同的项目设置不同的用户名</a></p><p>不能采用通用配置时，就要单独设置每个项目的 git 配置。</p><p>(a). 每个 git 项目下都会有一个隐藏的 .git 文件夹 ，<br>将终端的工作目录设置到相应的项目根目录下，执行 ls -a 命令，显示所有文件，即可看到 .git 的隐藏文件夹。<br>通过 cd .git 进入该目录，发现该目录下有个 config 文件，采用 open config 命令打开，添加如下配置：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">    name = XXX(自己的名称英文)</span><br><span class="line">    email = XXXX(邮箱)</span><br></pre></td></tr></table></figure></p><p>保存，command+s 即可。<br>这时候就为该项目配置了独立的用户名和邮箱。提交代码时，提交日志上显示的就是设置的名称，当然 github 这种会根据设置的邮箱来设置对应的用户名。</p><p>(b). 通过命令行的方式 (即要去掉 –global 参数) 去设置单独的 git 配置，只需要在 .git 文件夹下。 例如执行如下命令，就可以修改当前项目提交代码时用到的用户名。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git  config  user.name  "xxxxx"</span><br></pre></td></tr></table></figure></p><p>如果全局的配置和当前项目的单独配置中出现相同的配置选项，比如全局和项目都设置了 user.name ，那么在该项目中进行 git 操作时，会默认采用该项目配置的用户名。</p><p>### <strong>^X 离开</strong></p><p>ref: <a href="https://blog.csdn.net/YQXLLWY/article/details/55214943" target="_blank" rel="noopener">sudo 简介</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git commit -a</span><br></pre></td></tr></table></figure><p>出现问题，该界面无法离开<br><img src="/images/2018-07/09_git_commit_a.png"></p><p>这些命令的执行方式是：Esc，然后命令中的 ^ 代表 Alt，如离开 ^X ，就需要依次按 Esc, Alt x ，这样才会退出，有点像 vim。</p><p>### <strong>next</strong></p><h2 id="常用-Git-命令清单"><a href="#常用-Git-命令清单" class="headerlink" title="常用 Git 命令清单"></a>常用 Git 命令清单</h2><p>ref: <a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">常用 Git 命令清单</a></p><p>日常使用的 6 个命令<br><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015120901.png" alt="git"></p><p>专有名词：  </p><ul><li>Workspace：工作区  </li><li>Index / Stage：暂存区  </li><li>Repository：仓库区（或本地仓库）  </li><li>Remote：远程仓库  </li></ul><h3 id="一、新建代码库"><a href="#一、新建代码库" class="headerlink" title="一、新建代码库"></a>一、新建代码库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><h3 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h3><p>Git 的设置文件为 .gitconfig ，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">"[name]"</span></span><br><span class="line">$ git config [--global] user.email <span class="string">"[email address]"</span></span><br></pre></td></tr></table></figure></p><h3 id="三、增加-删除文件"><a href="#三、增加-删除文件" class="headerlink" title="三、增加/删除文件"></a>三、增加/删除文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h3 id="四、代码提交"><a href="#四、代码提交" class="headerlink" title="四、代码提交"></a>四、代码提交</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h3 id="五、分支"><a href="#五、分支" class="headerlink" title="五、分支"></a>五、分支</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -r</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出所有本地分支和远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -a</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，但依然停留在当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch [branch-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，并切换到该分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b [branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，指向指定commit</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch [branch] [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --track [branch] [remote-branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到指定分支，并更新工作区</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout [branch-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换到上一个分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并指定分支到当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge [branch]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 选择一个commit，合并进当前分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git cherry-pick [commit]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -d [branch-name]</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除远程分支</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git push origin --delete [branch-name]</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git branch -dr [remote/branch]</span></span><br></pre></td></tr></table></figure><h3 id="六、标签"><a href="#六、标签" class="headerlink" title="六、标签"></a>六、标签</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h3 id="七、查看信息"><a href="#七、查看信息" class="headerlink" title="七、查看信息"></a>七、查看信息</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">"@&#123;0 day ago&#125;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h3 id="八、远程同步"><a href="#八、远程同步" class="headerlink" title="八、远程同步"></a>八、远程同步</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h3 id="九、撤销"><a href="#九、撤销" class="headerlink" title="九、撤销"></a>九、撤销</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h3 id="十、其他"><a href="#十、其他" class="headerlink" title="十、其他"></a>十、其他</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line">$ git archive</span><br></pre></td></tr></table></figure><h1 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h1><p><strong>编辑器</strong><br><a href="https://atom.io/" target="_blank" rel="noopener">Atom</a><br><a href="http://25.io/mou/" target="_blank" rel="noopener">Mou</a><br><a href="https://typora.io/" target="_blank" rel="noopener">typora</a></p><p><strong>png 图片在线压缩</strong><br><a href="https://compresspng.com/zh/" target="_blank" rel="noopener">PNG压缩</a><br><a href="https://www.iloveimg.com/zh-cn/resize-image" target="_blank" rel="noopener">调整单个图像文件</a><br><a href="https://www.yasuotu.com/png" target="_blank" rel="noopener">压缩图</a></p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><p>参考<br><a href="http://einverne.github.io/markdown-style-guide/zh.html" target="_blank" rel="noopener">Markdown 书写风格指南</a><br><a href="http://xianbai.me/learn-md/article/extension/code-blocks-and-highlighting.html" target="_blank" rel="noopener">Intro to Markdown, 代码块和语法高亮</a><br><a href="https://sspai.com/post/37271" target="_blank" rel="noopener">Markdown 书写建议</a></p><p>### <strong>通用规则</strong></p><p>文件名建议使用如下的风格:  </p><ul><li>用小写代替大写  </li><li>把开头 the, a, an 除去  </li><li>用连字符代替标点和空格  </li><li>用一个连字符代替连续多个连字符，当多个连字符出现时，只使用一个  </li><li>不在文件名前后使用连字符</li></ul><p>引用：在符号 &gt; 后面接一个空格。不要在单独的引用中使用空行。<br>列表：<br>(1) 无序使用连字符 “-“，不建议使用 “*“ (可能和加粗和斜体符号产生混淆) 和 “+” (不流行)<br>(2) 有序尽量选用 “1.”，除非打算通过数字在相同 Markdown 文件或者外部文件中引用他们。<br>(3) 尽量使用无序列表，除非有通过数字引用的需求。最佳则是从来不通过符号来引用它们。  </p><p>### <strong>常用语法</strong></p><p>(1) 段落与换行<br>段落前后：空行，即行内什么都没有或只有空白符 (空格或制表符)<br>段落内加入换行 (\<br>): 可在前一行末尾加入至少两个空格，然后换行写其它文字<br>Markdown 中的多数区块都需要在两个空行之间。</p><p>(2) 标题<br>Setext 形式 (多个 = 或 -，分别支持 h1,h2 两种标题)<br>atx 形式 (#: 对称形式，或只在左边使用)，注意 # 左侧不可有任何空白，内侧可以</p><p>(3) 引用<br>引用内容：段落或内容前使用 > 符号<br>多行引用：每行前加，或仅在第一行使用 (后面相邻行可省略)；如需换行，可行尾添加两个空格，或在引用内容中加一个空行<br>嵌套使用：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;也可以在引用中</span><br><span class="line">&gt;&gt;使用嵌套的引用</span><br></pre></td></tr></table></figure></p><p>其他 Markdown：引用中可使用其他任何 Markdown 语法</p><p>(4) 列表<br>无序列表项的开始：符号(‘*‘, ‘+‘, 或 ‘-‘) 空格；<br>有序列表项的开始：数字 . 空格；<br>空格至少为一个，多个空格将被解析为一个，如果仅需要在行前显示数字和 ‘.’ ：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">05\. 可以使用：数字\. 来取消显示为列表</span><br></pre></td></tr></table></figure></p><p>嵌套的列表：<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1. </span>第一层</span><br><span class="line">  + 1-1</span><br><span class="line">  + 1-2</span><br></pre></td></tr></table></figure></p><blockquote><p>* 的语法专门用来显示 Markdown 语法中使用的特殊字符，参考 <a href="http://xianbai.me/learn-md/article/syntax/blackslash-escapes.html" target="_blank" rel="noopener">字符转义</a></p></blockquote><p>(5) 代码  </p><p>(6) 分隔线<br>一行内使用三个或更多，增加分隔线 (\<hr>)<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">***</span></span><br><span class="line">------</span><br><span class="line"><span class="emphasis">___</span> //下划线</span><br></pre></td></tr></table></figure></p><p>多个字符之间可以有空格 (空白符)，但不能有其他字符<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span><span class="bullet">* *</span></span><br><span class="line"><span class="bullet">- </span>- -</span><br></pre></td></tr></table></figure></p><p>(7) 超链接<br>行内式：title 可以使用 ‘ 或 “<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">title text</span>](<span class="link">URL 'link text'</span>)</span><br></pre></td></tr></table></figure></p><p>参考式：(1) 能尽量保持文章结构的简单，也方便统一管理 URL； (2) 优点：可以在多个不同的位置引用同一个 URL<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">Google</span>][<span class="symbol">link</span>]</span><br><span class="line">[<span class="symbol">link</span>]: <span class="link">http://www.google.com/ "Google"</span></span><br><span class="line">识别符可以是字母、数字、空白或标点符号，不区分大小写</span><br><span class="line">格式：  [识别符]: URL 'title'</span><br><span class="line"></span><br><span class="line">[<span class="string">Google</span>][<span class="symbol"></span>]</span><br><span class="line">[<span class="symbol">Google</span>]: <span class="link">http://scholar.google.com/ "Google"</span></span><br><span class="line">省略识别符，使用链接文本作为识别符</span><br></pre></td></tr></table></figure></p><p>自动链接：适合行内较短的链接，会使用 URL 作为链接文字。邮箱地址会自动编码，以逃避抓取机器人。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">http:</span>//<span class="attr">www.google.com</span>/&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">123@email.com</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>(8) 图片<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">Name</span>](<span class="link">https://...</span>)</span><br></pre></td></tr></table></figure></p><p>同插入超链接的语法基本一致，也分行内式和参考式两种<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">GitHub</span>](<span class="link">https://avatars2.githubusercontent.com/u/3265208?v=3&amp;s=100 "GitHub,Social Coding"</span>)</span><br><span class="line">方括号中的部分是图片的替代文本，括号中的 'title' 部分和链接一样，是可选的。</span><br><span class="line"></span><br><span class="line">![<span class="string">GitHub</span>][<span class="symbol">github</span>]</span><br><span class="line">[<span class="symbol">github</span>]: <span class="link">https://avatars2.githubusercontent.com/u/3265208?v=3&amp;s=100 "GitHub,Social Coding"</span></span><br></pre></td></tr></table></figure></p><p>指定图片的显示大小<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Markdown 不支持指定图片的显示大小，不过可以通过直接插入<span class="tag">&lt;<span class="name">img</span> /&gt;</span>标签来指定相关属性：</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://avatars2.githubusercontent.com/u/3265208?v=3&amp;s=100"</span> <span class="attr">alt</span>=<span class="string">"GitHub"</span> <span class="attr">title</span>=<span class="string">"GitHub,Social Coding"</span> <span class="attr">width</span>=<span class="string">"50"</span> <span class="attr">height</span>=<span class="string">"50"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>(9) 强调<br><em>斜体</em>    <strong>粗体</strong>    <strong><em>强调</em></strong>  </p><p>(10) 字符转义  </p><p>### <strong>扩展语法</strong></p><p>(1) 删除线<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">这就是 \~~删除线\~~</span><br><span class="line">这就是 ~~删除线~~</span><br></pre></td></tr></table></figure></p><p>这就是 <del>删除线</del></p><p>(2) 代码块和语法高亮</p><p>(3) 表格 和对齐<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">|    name    | age |</span><br><span class="line">| ---------- | --- |</span><br><span class="line">| LearnShare |  12 |</span><br><span class="line">| Mike       |  32 |</span><br><span class="line"></span><br><span class="line">| left | center | right |</span><br><span class="line">| :--- | :----: | ----: |</span><br><span class="line">| aaaa | bbbbbb | ccccc |</span><br><span class="line">| a    | b      | c     |</span><br></pre></td></tr></table></figure></p><p>(4) Task List<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>[ ] Eat</span><br><span class="line"><span class="bullet">- </span>[x] Code</span><br><span class="line">  - [x] HTML</span><br><span class="line">  - [x] CSS</span><br><span class="line">  - [x] JavaScript</span><br><span class="line"><span class="bullet">- </span>[ ] Sleep</span><br></pre></td></tr></table></figure></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><p>### <strong>代码块加入行号和支持语言</strong></p><p>加入行号只需用三个 “`” 框入即可</p><p><a href="https://www.jianshu.com/p/aaad9a3f619b" target="_blank" rel="noopener">前端：给你的 Markdown 文章添加代码高亮及行号</a><br><a href="https://blog.bluerain.io/p/markdown-code-block-line-number.html" target="_blank" rel="noopener">重构 Markdown 代码块文档结构以支持行号显示</a><br><a href="http://www.dongye.tk/2014/10/11/markdown-intro/" target="_blank" rel="noopener">Markdown 入门</a></p><p><a href="https://www.jianshu.com/p/f02d5a3736ba" target="_blank" rel="noopener">Markdown代码高亮支持的语言</a><br><a href="http://www.cnblogs.com/qyf404/p/5019631.html" target="_blank" rel="noopener">markdown代码块支持的语言</a></p><p>### <strong>显示 bash/shell 代码</strong></p><p>ref: <a href="https://codeday.me/bug/20170706/34249.html" target="_blank" rel="noopener">在 markdown 中突出显示 bash/shell 代码</a></p><p>取决于 markdown 渲染引擎和 markdown 的味道。没有标准。如果你的意思是 github flavored markdown 例如，shell 应该工作正常。别名是 sh，bash 或 zsh。您可以找到可用的语法词法列表 <a href="https://github.com/github/linguist/blob/master/lib/linguist/languages.yml" target="_blank" rel="noopener">here</a></p><p>### <strong>显示 颜色块</strong></p><p>ref:<br><a href="https://www.zhihu.com/question/22504694" target="_blank" rel="noopener">为什么 markdown 不支持字号和字体颜色？</a><br><a href="https://blog.csdn.net/u010177286/article/details/50358720" target="_blank" rel="noopener">Markdown 使用技巧总结</a>  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">red</span>&gt;</span>内容<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">orange</span>&gt;</span>背景色是：orange<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是字体颜色和颜色块都显示不出来</p><h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><ul><li>参考手册：Linux 命令大全  </li><li>Linux 教程  </li><li>Shell 教程  </li></ul><p>ref: <a href="http://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">Linux 命令大全</a></p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>### <strong>1、文件管理</strong></p><p>cat 命令用于连接文件并打印到标准输出设备上。<br>Linux/Unix 的文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以藉以控制文件如何被他人所调用。<br>chown 将指定文件的拥有者改为指定的用户或组。使用权限是 root。<br>locate 命令用于查找符合条件的文档，它会去保存文档和目录名称的数据库内，查找合乎范本样式条件的文档或目录。<br>cp 命令主要用于复制文件或目录。<br>mv 命令用来为文件或目录改名、或将文件或目录移入其它位置。<br>rm 命令用于删除一个文件或者目录。<br>which 命令用于查找文件。该指令会在环境变量 $PATH 设置的目录里查找符合条件的文件。<br>whereis 命令用于查找文件。该指令会在特定目录中查找符合条件的文件。这些文件应属于原始代码、二进制文件，或是帮助文件。该指令只能用于查找二进制文件、源代码文件和 man 手册页，一般文件的定位需使用 locate 命令。<br>rcp 命令用于复制远程文件或目录。rcp 指令用在远端复制文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则它会把前面指定的所有文件或目录复制到该目录中。<br>scp 命令用于 Linux 之间复制文件和目录。scp 是 secure copy的缩写,scp 是 linux 系统下基于 ssh 登陆进行安全的远程文件拷贝命令。  </p><p>cmp 命令用于比较两个文件是否有差异。<br>cut 命令用于显示每行从开头算起 num1 到 num2 的文字。<br>diff 命令用于比较文件的差异。逐行比较文本异同，如指定比较目录，则比较相同文件名的文件，但不比较其中的子目录。<br>diffstat 命令根据diff的比较结果，显示统计数字。<br>file 命令用于辨识文件类型。<br>find 命令用来在指定目录下查找文件。如不指定参数，则在当前目录下查找子目录与文件。<br>git 命令是文字模式下的文件管理员。<br>less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。<br>more 命令类似 cat ，不过会以一页一页的形式显示，更方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示，而且还有搜寻字串的功能（与 vi 相似），使用中的说明文件，请按 h 。<br>od 命令用于输出文件内容。它读取所给予的文件的内容，并将其内容以八进制字码呈现出来。<br>paste 命令用于合并文件的列。<br>patch 命令用于修补文件。<br>touch 命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。 ls -l 可以显示档案的时间记录。<br>slocate 命令查找文件或目录，本身有一个数据库，里面存放了系统中文件与目录的相关信息。<br>split 命令用于将大文件分割成较小的文件，在默认情况下按照每 1000 行切割。<br>tee 命令用于读取标准输入的数据，并将内容输出到标准输出设备，同时保存成文件。<br>read  命令用于从标准输入读取数值。  </p><p>### <strong>2、文档编辑</strong></p><p>grep 命令用于查找文件里符合条件的字符串。<br>egrep 命令用于在文件内查找指定的字符串。其表达比 grep 更规范。<br>rgrep 命令用于递归查找文件里符合条件的字符串。<br>sort 命令用于将文本文件内容加以排序。可针对文本文件的内容，以行为单位来排序。  </p><p>join 命令用于将两个文件中，指定栏位内容相同的行连接起来。<br>look 命令用于查询单词。<br>spell 命令可建立拼写检查程序。可从标准输入设备读取字符串，结束后显示拼错的词汇。<br>uniq 命令用于检查及删除文本文件中重复出现的行列。<br>let 命令是 BASH 中用于计算的工具，用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量。如果表达式中包含了空格或其他特殊字符，则必须引起来。<br>wc命令用于计算字数。可以计算文件的 Byte 数、字数、或是列数，若不指定文件名称、或是所给予的文件名为”-“，则 wc 指令会从标准输入设备读取数据。  </p><p>### <strong>3、文件传输</strong></p><p>ftp 命令设置文件系统相关功能。FTP 是 ARPANet 的标准文件传输协议，该网络就是现今 Internet 的前身。<br>bye 命令用于中断 FTP 连线并结束程序。在 ftp 模式下，输入 bye 即可中断目前的连线作业，并结束 ftp 的执行。<br>tftp 命令用于传输文件。  </p><h2 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h2><p>### <strong>4、磁盘管理</strong></p><p>cd 命令用于切换当前工作目录至 dirName (目录参数)。<br>mkdir 命令用于建立名称为 dirName 之子目录。<br>ls 命令用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录)。  </p><p>df 命令用于显示目前在 Linux 系统上的文件系统的磁盘使用情况统计。<br>mount 命令是经常会使用到的命令，它用于挂载 Linux 系统外的文件。<br>mount 命令是经常会使用到的命令，它用于挂载 Linux 系统外的文件。  </p><p>stat 命令用于显示 inode 内容。<br>lndir 命令用于连接目录内容。  </p><p>### <strong>5、磁盘维护</strong></p><p>sync 命令用于数据同步，在关闭 Linux 系统时使用。  </p><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><p>### <strong>6、网络通讯</strong></p><p>ifconfig 命令用于显示或设置网络设备。<br>ping 命令用于检测主机。执行 ping 指令会使用 ICMP 传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。  </p><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><p>### <strong>7、系统管理</strong></p><p>exit 命令用于退出目前的 shell。<br>kill 命令用于删除执行中的程序或工作。<br>su 命令用于变更为其他使用者的身份，除 root 外，需要键入该使用者的密码。<br>sudo 命令以系统管理者的身份执行指令，也就是说，经由 sudo 所执行的指令就好像是 root 亲自执行。<br>shutdown 命令可以用来进行关机程序。<br>reboot 命令用于用来重新启动计算机。  </p><p>date 命令可以用来显示或设定系统的日期与时间。<br>id 命令用于显示用户的 ID，以及所属群组的 ID。<br>who 命令用于显示系统中有哪些使用者正在上面，显示的资料包含了使用者 ID、使用的终端机、从哪边连上来的、上线时间、呆滞时间、CPU 使用量、动作等等。<br>logout 命令用于退出系统。<br>free 命令用于显示内存状态。会显示内存的使用情况，包括实体内存，虚拟的交换文件内存，共享内存区段，以及系统核心使用的缓冲区等。  </p><p>useradd 命令用于建立用户帐号。<br>userdel 命令用于删除用户帐号。<br>usermod 命令用于修改用户帐号。<br>userconf 命令用于用户帐号设置程序。<br>uname 命令用于显示系统信息。<br>skill 命令送个讯号给正在执行的程序，预设的讯息为 TERM (中断)，较常使用的讯息为 HUP、INT、KILL、STOP、CONT 和 0。  </p><p>### <strong>8、系统设置</strong></p><p>clear 命令用于清除屏幕。<br>alias 命令用于设置指令的别名。<br>export 命令用于设置或显示环境变量。<br>ulimit 命令用于控制shell程序的资源。  </p><p>enable 命令用于启动或关闭 shell 内建指令。<br>time 命令的用途，在于量测特定指令执行时所需消耗的时间及系统资源等资讯。<br>reset 命令其实和 tset 是一同个命令，它的用途是设定终端机的状态。  </p><h2 id="设备"><a href="#设备" class="headerlink" title="设备"></a>设备</h2><p>### <strong>9、备份压缩</strong></p><p>tar 命令用于备份文件。<br>zip 命令用于压缩文件。  </p><p>### <strong>10、设备管理</strong></p><p>loadkeys 命令可以根据一个键盘定义表改变 linux 键盘驱动程序转译键盘输入过程。  </p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>### <strong>其他命令 - Linux bc 命令</strong></p><p>ref: <a href="http://www.runoob.com/linux/linux-comm-bc.html" target="_blank" rel="noopener">Linux bc 命令</a></p><p>bc 命令是任意精度计算器语言，通常在 linux 下当计算器用。<br>它类似基本的计算器, 使用这个计算器可以做基本的数学运算。</p><p>### <strong>其他命令 - Linux tail 命令</strong></p><p>ref: <a href="http://www.runoob.com/linux/linux-comm-tail.html" target="_blank" rel="noopener">Linux tail 命令</a></p><p>tail 命令可用于查看文件的内容，有一个常用的参数 <strong>-f</strong> 常用于查阅正在改变的日志文件。<br><strong>tail -f filename</strong> 会把 filename 文件里的最尾部的内容显示在屏幕上，并且不断刷新，只要 filename 更新就可以看到最新的文件内容。</p><h1 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h1><p>ref: <a href="http://www.runoob.com/linux/linux-vim.html" target="_blank" rel="noopener">Linux vi/vim</a></p><h2 id="vi-vim-的使用"><a href="#vi-vim-的使用" class="headerlink" title="vi/vim 的使用"></a>vi/vim 的使用</h2><p>(1)  vi/vim 刚启动时，进入命令模式 </p><p><strong>i</strong> 切换到输入模式，以输入字符。<br><strong>x</strong> 删除当前光标所在处的字符。<br><strong>:</strong> 切换到底线命令模式，以在最低一行输入命令。  </p><p>(2)  输入模式 (也称为编辑模式) </p><p><strong>字符按键以及 Shift 组合</strong>，输入字符<br><strong>Enter</strong>，回车键，换行<br><strong>Back space</strong>，退格键，删除光标前一个字符<br><strong>Del</strong>，删除键，删除光标后一个字符<br><strong>方向键</strong>，在文本中移动光标<br><strong>Home/End</strong>，移动光标到行首/行尾<br><strong>Page Up/Page Down</strong>，上/下翻页<br><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线<br><strong>Esc</strong>，退出输入模式，切换到命令模式  </p><p>(3)  底线命令模式 </p><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。<br>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。<br>在底线命令模式中，基本的命令有（已经省略了冒号）： </p><ul><li><strong>q</strong> 退出程序  </li><li><strong>w</strong> 保存文件  </li></ul><p>按 ESC 键可随时退出底线命令模式。<br>简单地说，我们可以将这三个模式想成底下的图标来表示：</p><p><img src="http://www.runoob.com/wp-content/uploads/2014/07/vim-vi-workmodel.png" alt="Vim/Vi 工作模式"></p><h2 id="vi-vim-按键说明"><a href="#vi-vim-按键说明" class="headerlink" title="vi/vim 按键说明"></a>vi/vim 按键说明</h2><p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p><p>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</p><p>第二部分：一般模式切换到编辑模式的可用的按钮说明</p><p>第三部分：一般模式切换到指令行模式的可用的按钮说明</p><p>特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。</p><p>举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</p><h2 id="什么是-vim"><a href="#什么是-vim" class="headerlink" title="什么是 vim?"></a>什么是 vim?</h2><p>vim 键盘图<br><img src="http://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif" alt="vim 键盘图"></p>]]></content>
      
      <categories>
          
          <category> Records </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Commands </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>虚拟机配置 (Ubuntu, Python)</title>
      <link href="/2018/2018-07-07-VirtualBox-on-Windows/"/>
      <url>/2018/2018-07-07-VirtualBox-on-Windows/</url>
      <content type="html"><![CDATA[<h1 id="VirtualBox-安装-Ubuntu-16-04"><a href="#VirtualBox-安装-Ubuntu-16-04" class="headerlink" title="VirtualBox 安装 Ubuntu 16.04"></a>VirtualBox 安装 Ubuntu 16.04</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><strong>软件版本</strong></p><blockquote><p><strong>Windows:</strong> Win 7/10<br><strong>VirtualBox:</strong> e.g., VirtualBox 5.2.6/5.1.16<br><strong>Ubuntu:</strong> ubuntu-16.04.4-desktop-amd64.iso  </p></blockquote><p><strong>在 bios 开启 Virtualization Technology (VTx) 选项</strong><br>其目的是：可以安装 64 位 linux 操作系统，并且可以开启虚拟机多 CPU 配置。<br>机器不同，BIOS 配置不同，有些机器是默认打开 VTx 选项的，无需此步。如果没有打开 VTx，在 BIOS 打开即可。<br>如：<br><a href="https://bbs.thinkpad.com/thread-4406091-1-1.html" target="_blank" rel="noopener">thinkpad t460 开启虚拟化</a><br><a href="http://iknow.lenovo.com/app/detail/dc_C183451.html" target="_blank" rel="noopener">如何开启笔记本的 VT-x 虚拟化技术功能</a><br><a href="https://blog.csdn.net/liynet/article/details/7232599" target="_blank" rel="noopener">联想 ThinkPad 使用虚拟机时遇到要求打开 CPU 中 VT 的方法</a>  </p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>新建虚拟机  </p><ul><li>“新建”虚拟机电脑，选择“现在创建虚拟磁盘”，其中内存设为 2048 GB（自定义）  </li><li>创建虚拟磁盘，文件大小设为 40 GB（自定义），‘虚拟磁盘文件类型’使用 vdi 或 vmdb 均可，‘存储在物理磁盘上’选择“动态分配”  </li></ul><p>开始安装  </p><ul><li>点击“启动”，选择光盘文件开始安装  </li><li>选择语言，中英均可  </li><li>安装时下载更新  </li><li>清除整个磁盘并安装  </li><li>设置时区  </li><li>设置键盘语言  </li><li>设置用户名和密码  </li><li>等待……  </li><li>安装完成后重启，重启前要移除安装光盘  </li></ul><p>安装增强功能  </p><ul><li>“设备” -&gt; “安装增强功能”  </li><li>重启  </li></ul><p>设置共享文件夹  </p><ul><li>“控制” -&gt; “设置” -&gt; “共享文件夹”，点击右侧的添加按钮  </li><li>一定要选中“自动挂载”和“固定分配”  </li><li>添加共享文件夹权限  <blockquote><p>sudo usermod -G vboxsf username</p></blockquote></li><li>一定要重启。重启完成后再查看，发现每个文件夹前都多了”sf_”，在”/media”文件夹下。</li></ul><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><ul><li>设置 root 密码  <blockquote><p>sudo passwd   </p></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">安装 ubuntu 成功后，都是普通用户权限，并没有最高 root 权限。如果需要使用 root 权限，通常都会在命令前面加上 sudo 。有时候这样比较麻烦。  </span><br><span class="line">我们一般使用 su 命令来直接切换到 root 用户，但是会抛出 su: Authentication failure 这样的问题。这是因为：ubuntu 默认 root 密码是随机的，即每次开机都有一个新密码。  </span><br><span class="line">给 root 用户设置一个初始密码只需要输入 sudo passwd 命令，输入一般用户密码并设定 root 用户密码。  </span><br><span class="line">设定 root 密码成功后，输入 su 命令，并输入刚才设定的 root 密码，就可以切换成 root 了。  </span><br><span class="line">提示符 $ 代表一般用户，提示符 # 代表 root 用户。  </span><br><span class="line">输入 exit 命令，可退出 root 并返回一般用户。</span><br></pre></td></tr></table></figure><ul><li><p>username 不在 sudoer 文件中。此事将被报告  </p><blockquote><p>gedit /etc/sudoers 在 “# User privilege specification” 下增加一行 usernameALL=(ALL:ALL) ALL</p></blockquote></li><li><p><strong>无法进入root权限，却又需要root权限才能解决问题，的死循环</strong><br><strong><em>出错原因：</em></strong><br>设置root密码时把命令错输成 su passwd，再输正确命令时就提示不在sudoers文件中了。<br>此时，root密码随机，无法进入root权限；而更改sudoers文件又需要root权限，因此陷入死循环。  </p><p><strong><em>更正办法：</em></strong>  <a href="https://blog.csdn.net/u011277123/article/details/78011983" target="_blank" rel="noopener">sudoers修改不能在终端使用sudo 和su的解决方法</a>  </p><ul><li>重启电脑，一直按着 esc 键，进入 “高级模式 -&gt; recovery mode -&gt; root” ，回车，这时会进入root目录，相当于单用户模式  </li><li>在root终端输入    # mount -o remount rw /  </li><li>修改/etc/sudoers的权限为777（默认权限是440）    # chmod 777 /etc/sudoers  </li><li># vi /etc/sudoers 回车，然后在后端加入 %admin ALL=(ALL) ALL 回车 sudo ALL=(ALL:ALL) ALL 保存  </li><li>修改完保存退出后将/etc/sudoers权限恢复成默认的440权限，然后重启。这样你的问题解决！ <blockquote><p># chmod 440 /etc/sudoers<br># reboot</p></blockquote></li></ul></li></ul><ul><li><p>E: 无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系。</p><p>在“设置”下的“软件和更新”里，去掉“更新”下的“不支持的更新”<br>然后更新一下  </p><blockquote><p>sudo apt-get update</p></blockquote></li></ul><p>参考  </p><ol><li><p>Ubuntu 的选择， i386 还是 amd64 ？<br><a href="http://forum.ubuntu.org.cn/viewtopic.php?t=80409" target="_blank" rel="noopener">UBUNTU amd64 和 i386有什么区别</a><br>i386是32位，amd64是64位。<br>64位支持的内存一般更大（但如果只有1-2G内存的话，没必要装64位的）；且性能会高些，如果是数值计算，性能会高很多，整数运算上同频率64位的效率是32位的4倍左右。<br>不过用的人少，问题略多（没有64位的flash支持，只能先用32位的，还有一些软件默认不提供64位包，不过可以自己编译。图省事的，还是用32位的吧）。</p></li><li><p>VirtualBox 安装 虚拟机 Ubuntu 16.04<br><a href="https://www.linuxidc.com/Linux/2016-08/134580.htm" target="_blank" rel="noopener">VirtualBox安装部署Ubuntu 16.04 图文详解</a><br><a href="https://blog.csdn.net/u012732259/article/details/70172704" target="_blank" rel="noopener">基于VirtualBox虚拟机安装Ubuntu图文教程</a>  </p></li><li><p>ubuntu 设置 root 密码<br><a href="https://blog.csdn.net/u012301841/article/details/73692426" target="_blank" rel="noopener">ubuntu 16.04 设置root用户初始密码</a><br><a href="https://blog.csdn.net/weixin_36210698/article/details/72857366" target="_blank" rel="noopener">ubuntu 首次登陆设置root密码</a>  </p></li><li><p>ubuntu 不在 sudoers 文件中。此事将被报告。<br><a href="https://blog.csdn.net/lincyang/article/details/21020295" target="_blank" rel="noopener">用户名 不在 sudoers文件中，此事将被报告。</a><br><a href="https://blog.csdn.net/byzhang19900624/article/details/8813396" target="_blank" rel="noopener">解决 用户不在 sudoers 文件中 的问题</a>  </p></li></ol><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>ref:  <a href="https://blog.csdn.net/debug_cpp/article/details/2687067" target="_blank" rel="noopener">如何查看ubuntu的内核版本和发行版本号</a></p><p>查看 Ubuntu 的内核和发行版本号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/issue</span><br><span class="line">sudo lsb_release -a</span><br></pre></td></tr></table></figure><h1 id="Ubuntu-16-04-下-Python-的使用"><a href="#Ubuntu-16-04-下-Python-的使用" class="headerlink" title="Ubuntu 16.04 下 Python 的使用"></a>Ubuntu 16.04 下 Python 的使用</h1><h2 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h2><p>ref:  <a href="https://blog.csdn.net/jenyzhang/article/details/49646641" target="_blank" rel="noopener">linux 查看python安装路径,版本号</a> </p><p>Ubuntu 16.04 自带两个版本的 Python，分别为 2.7 和 3.5 。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python2</span><br><span class="line">python3</span><br><span class="line">python  //默认为 2</span><br></pre></td></tr></table></figure></p><p>查看 Ubuntu 中安装的 Python 路径<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whereis python</span><br><span class="line"><span class="built_in">which</span> python</span><br></pre></td></tr></table></figure></p><p>查看 Ubuntu 中安装的 Python 版本号<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python --version</span><br><span class="line">python</span><br></pre></td></tr></table></figure></p><h2 id="pip-相关"><a href="#pip-相关" class="headerlink" title="pip 相关"></a>pip 相关</h2><h3 id="管理员安装"><a href="#管理员安装" class="headerlink" title="管理员安装"></a>管理员安装</h3><p>程序“pip”尚未安装。如需运行‘pip’，请要求管理员安装 ‘python-pip’ 软件包。</p><p>安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br><span class="line">sudo apt-get install python3-pip  //pip3</span><br></pre></td></tr></table></figure></p><p>更新<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install --upgrade pip  //bug! 会更新到 10.x</span><br><span class="line">pip install --upgrade pip==9.0.3</span><br></pre></td></tr></table></figure></p><p>查看<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip 8.1.1:pip list</span><br><span class="line">pip 9.0.1:pip list --format=columns</span><br><span class="line">pip 10.0.1:pip list</span><br></pre></td></tr></table></figure></p><h3 id="virtualenv-与-virtualenvwrapper"><a href="#virtualenv-与-virtualenvwrapper" class="headerlink" title="virtualenv 与 virtualenvwrapper"></a>virtualenv 与 virtualenvwrapper</h3><p>ref: <a href="https://www.jianshu.com/p/44ab75fbaef2" target="_blank" rel="noopener">python 虚拟环境[virtualenv/virtualenvwrapper]设置</a></p><p>安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">pip install virtualenvwrapper</span><br></pre></td></tr></table></figure></p><p>创建新环境<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">virtualenv [新环境名]</span><br><span class="line">virtualenv [新环境名] --python=/usr/bin/python3</span><br></pre></td></tr></table></figure></p><p>e.g.,  </p><blockquote><p>mkdir VirtualEnv<br>virtualenv py27env –python=/usr/bin/python2<br>virtualenv py35env –python=/usr/bin/python3</p></blockquote><p>虚拟环境的进入和退出  </p><blockquote><p>cd VirtualEnv<br>source py27env/bin/activate<br>deactivate<br>source py35env/bin/activate<br>deactivate</p></blockquote><h2 id="安装所需包"><a href="#安装所需包" class="headerlink" title="安装所需包"></a>安装所需包</h2><h3 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy</span><br><span class="line">pip install scipy</span><br><span class="line">pip install scikit-learn</span><br><span class="line"></span><br><span class="line">pip install matplotlib</span><br><span class="line">pip install pandas</span><br><span class="line">pip install pillow</span><br><span class="line"></span><br><span class="line">pip install pathos</span><br><span class="line">pip install lmdb</span><br><span class="line">pip install requests</span><br></pre></td></tr></table></figure><h3 id="Python-2-7-12"><a href="#Python-2-7-12" class="headerlink" title="Python 2.7.12+"></a>Python 2.7.12+</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pip install theano</span><br><span class="line">pip install keras</span><br><span class="line"></span><br><span class="line">pip install tensorflow==1.4.1</span><br><span class="line"></span><br><span class="line">pip install http://download.pytorch.org/whl/cpu/torch-0.4.0-cp27-cp27mu-linux_x86_64.whl</span><br><span class="line">pip install torchvision</span><br></pre></td></tr></table></figure><p>如果有 GPU，比如服务器<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow-gpu==1.4.*</span><br><span class="line">pip install torch torchvision</span><br><span class="line">//pip uninstall tensorflow tensorboard</span><br></pre></td></tr></table></figure></p><h3 id="Python-3-5-2"><a href="#Python-3-5-2" class="headerlink" title="Python 3.5.2+"></a>Python 3.5.2+</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow==1.4.1</span><br><span class="line">pip install http://download.pytorch.org/whl/cpu/torch-0.3.1-cp35-cp35m-linux_x86_64.whl</span><br><span class="line">pip install torchvision==0.2.0</span><br><span class="line">pip install keras</span><br><span class="line"></span><br><span class="line">pip install pymongo</span><br><span class="line">pip install photinia</span><br></pre></td></tr></table></figure><p>服务器如有 GPU<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install tensorflow-gpu==1.4.*</span><br><span class="line">//pip3 install torch torchvision</span><br><span class="line">pip install http://download.pytorch.org/whl/cu80/torch-0.3.1-cp35-cp35m-linux_x86_64.whl</span><br><span class="line">pip install torchvision==0.2.0</span><br></pre></td></tr></table></figure></p><p>注意：<br>使用 lmdb 需要安装 python3-dev<br>使用 matplotlib 需要安装 python3-tk  </p><blockquote><p>sudo apt-get install python3-dev<br>sudo apt-get install python3-tk</p></blockquote><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> scipy</span><br><span class="line"><span class="keyword">import</span> sklearn</span><br><span class="line"><span class="comment"># import matplotlib</span></span><br><span class="line"><span class="comment"># matplotlib.use('Agg')</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment">#No need: import tensorboard</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"><span class="keyword">import</span> theano</span><br><span class="line"><span class="keyword">import</span> keras</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pathos</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> lmdb</span><br><span class="line"><span class="keyword">import</span> pymongo</span><br><span class="line"><span class="keyword">import</span> photinia <span class="keyword">as</span> ph</span><br></pre></td></tr></table></figure><h1 id="安装开发环境"><a href="#安装开发环境" class="headerlink" title="安装开发环境"></a>安装开发环境</h1><h2 id="sublime-texstudio-texlive"><a href="#sublime-texstudio-texlive" class="headerlink" title="sublime, texstudio, texlive"></a>sublime, texstudio, texlive</h2><p><a href="https://jingyan.baidu.com/article/64d05a023cd849de55f73be4.html" target="_blank" rel="noopener">Ubuntu 16.04安装sublime text3</a>  </p><p>sudo add-apt-repository ppa:webupd8team/sublime-text-3<br>sudo apt-get update<br>sudo apt-get install sublime-text-installer<br>subl  </p><p><a href="http://wuguowei.com/wordpress/archives/1578" target="_blank" rel="noopener">Linux系统 Ubuntu更新sublime-text3的正确方法</a>  </p><p>wget -qO - <a href="https://download.sublimetext.com/sublimehq-pub.gpg" target="_blank" rel="noopener">https://download.sublimetext.com/sublimehq-pub.gpg</a> | sudo apt-key add -<br>echo “deb <a href="https://download.sublimetext.com/" target="_blank" rel="noopener">https://download.sublimetext.com/</a> apt/stable/“ | sudo tee /etc/apt/sources.list.d/sublime-text.list<br>sudo apt-get update<br>sudo apt-get install sublime-text   </p><p><a href="http://wuguowei.com/wordpress/archives/1585" target="_blank" rel="noopener">sublime-text3无法输入中文的解决方法(linux环境)</a><br><a href="http://blog.51cto.com/xiumu/1766052" target="_blank" rel="noopener">sublime text3 安装 配置 以及常见问题汇总</a>   </p><p><a href="https://blog.csdn.net/DreamHome_S/article/details/77920303" target="_blank" rel="noopener">Ubuntu16.04中使用texlive+texstudio搭建Latex环境</a>   </p><p>sudo apt install texlive<br>sudo apt install latex-cjk-all<br>sudo apt install texstudio  </p><p>安装 texlive, 中文字体包, texstudio  </p><h2 id="安装-Python-开发环境"><a href="#安装-Python-开发环境" class="headerlink" title="安装 Python 开发环境"></a>安装 Python 开发环境</h2><h3 id="安装-Spyder"><a href="#安装-Spyder" class="headerlink" title="安装 Spyder"></a>安装 Spyder</h3><p>ref: <a href="http://blog.51cto.com/tong707/1970182" target="_blank" rel="noopener">在Ubuntu-16.04中安装Python可视化IDE——Spyder</a></p><p>安装Spyder之前，安装以下python常用库和依赖（如果安装过会跳过）:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-dev python-pip libxml2-dev libxslt1-dev zlib1g-dev libffi-dev libssl-dev</span><br><span class="line">sudo pip install scrapy</span><br><span class="line">sudo apt-get install libzmq-dev</span><br><span class="line">sudo pip install pyzmq <span class="comment">#here</span></span><br><span class="line">sudo pip install pygments</span><br><span class="line">sudo apt-get install qt4-dev-tools qt4-doc qt4-qtconfig qt4-demos qt4-designer</span><br><span class="line">sudo pip install qtconsole</span><br><span class="line">sudo pip install ipython</span><br></pre></td></tr></table></figure></p><p>安装 Spyder  </p><blockquote><p>sudo apt install spyder<br>我用的是 sudo apt-get install spyder</p></blockquote><p>安装成功后，命令行输入 spyder 可打开 IDE  </p><blockquote><p>spyder</p></blockquote><p>spyder 使用当前虚拟环境中的 python  </p><blockquote><p>虚拟环境的设置还可以通过 tools &gt; preferences &gt; python interpreter 来自定义 </p></blockquote><ul><li>Tools &gt; Preferences  </li><li>Step 1: Run &gt; Console &gt; 默认第一项改成第二项  </li><li>Step 2: Console &gt; Advanced settings &gt; Python executable 的默认第一项改成第二项  </li><li>Step 3: 把上一步中第二项的默认 “/usr/bin/python” 改成 “/home/ubuntu/VirtualEnv/py35env/bin/python”</li></ul><p>参考<br><a href="http://blog.51cto.com/tong707/1970182" target="_blank" rel="noopener">在Ubuntu-16.04中安装Python可视化IDE——Spyder</a><br><a href="https://blog.csdn.net/appleyuchi/article/details/78354694" target="_blank" rel="noopener">Ubuntu16.04下面spyder切换虚拟环境下面的python版本</a><br>废弃<br><a href="https://www.jianshu.com/p/1d33547f9f05" target="_blank" rel="noopener">conda 虚拟环境下配置spyder解释器为指定解释器</a><br><a href="https://www.jianshu.com/p/de68016087c4" target="_blank" rel="noopener">anaconda /spyder 多虚拟环境</a> </p><h3 id="安装-PyCharm"><a href="#安装-PyCharm" class="headerlink" title="安装 PyCharm"></a>安装 PyCharm</h3><blockquote><p>sudo add-apt-repository ppa:mystic-mirage/pycharm<br>sudo apt update<br>sudo apt install pycharm<br># 我后面两个用的是<br># sudo apt-get update</p></blockquote><h3 id="安装-Anaconda"><a href="#安装-Anaconda" class="headerlink" title="安装 Anaconda"></a>安装 Anaconda</h3><h2 id="安装-OpenCV"><a href="#安装-OpenCV" class="headerlink" title="安装 OpenCV"></a>安装 OpenCV</h2><h3 id="安装-opencv-3-0-0"><a href="#安装-opencv-3-0-0" class="headerlink" title="安装 opencv 3.0.0"></a>安装 opencv 3.0.0</h3><p>ref: <a href="http://nooverfit.com/wp/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%EF%BC%8C%E5%9C%A8ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85opencv-3-0-%E5%92%8C-python-2-7/" target="_blank" rel="noopener">手把手教你，在Ubuntu上安装OpenCV 3.0 和 Python 2.7+</a></p><p>(1) 打开终端窗口，更新 apt-get 包管理器，升级所有预安装包  </p><blockquote><p>$ sudo apt-get update<br>$ sudo apt-get upgrade  </p></blockquote><p>(2) 安装我们的开发工具和包  </p><blockquote><p>$ sudo apt-get install build-essential cmake git pkg-config  </p></blockquote><p>(3) OpenCV 需要从磁盘中加载不同格式的图片，如  JPEG, TIFF, PNG 等等．所以我们需要安装我们的图像 I/O 工具包  </p><blockquote><p>$ sudo apt-get install libjpeg-dev libtiff-dev libjasper-dev libpng-dev  </p></blockquote><p>(4) 另外，OpenCV 是用 GTK 开发包来显示 GUI,  即用户图形界面，所以我们要安装这个开发包  </p><blockquote><p>$ sudo apt-get install libgtk2.0-dev  </p></blockquote><p>(5) OpenCV 还必须处理视频流和单个帧，下面就是我们需要的安装包  </p><blockquote><p>$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev  </p></blockquote><p>(6) OpenCV 还包含一些内部优化工具  </p><blockquote><p>$ sudo apt-get install libatlas-base-dev gfortran  </p></blockquote><p>(7) 安装 python 包管理器 pip<br>(8) 步骤8  </p><ul><li><p>安装 virtualenv 和 virtualenvwrapper. 用来分割 python 虚拟环境. 这不是必须的, 但是强烈推荐  </p><blockquote><p>$ sudo pip install virtualenv virtualenvwrapper<br>$ sudo rm -rf ~/.cache/pip  </p></blockquote></li><li><p>现在我们有了 virtualenv 和 virtualenvwrapper, 我们要更新我们的 ~/.bashrc 文件  </p><blockquote><p># virtualenv and virtualenvwrapper<br>export WORKON_HOME=$HOME/.virtualenvs<br>source /usr/local/bin/virtualenvwrapper.sh  </p></blockquote></li><li><p>为了使 ~/.bashrc 文件生效 , 你可以用以下这些方法的其中之一<br>(1) 注销后重新登录, (2) 关闭终端开一个新终端, (3) 直接使得 ~/.bashrc 文件在当前生效:  </p><blockquote><p>$ source ~/.bashrc  </p></blockquote></li><li><p>最后我们生成名字叫 cv 的虚拟开发环境:  </p><blockquote><p>$ mkvirtualenv cv  </p></blockquote></li></ul><p>(9) 步骤9  </p><ul><li><p>安装 python 开发工具  </p><blockquote><p>$ sudo apt-get install python2.7-dev  </p></blockquote></li><li><p>安装 numpy   </p><blockquote><p>$ pip install numpy   </p></blockquote></li></ul><p>(10) 步骤10   </p><ul><li><p>预备环境终于都搞定啦, 我们进入正题, 安装 OpenCV 3.0.0  </p><blockquote><p>$ cd ~<br>$ git clone <a href="https://github.com/Itseez/opencv.git" target="_blank" rel="noopener">https://github.com/Itseez/opencv.git</a><br>$ cd opencv<br>$ git checkout 3.0.0   </p></blockquote></li><li><p>你也可以在这里使用 3.1.0, 但是别忘了去 OpenCV.org 官网看看有什么变动.  </p></li><li><p>有一些牛叉的算法如 SIFT, SURF, 等等 在 opencv_contrib 里面, 所以我们要安装它来支持 OpenCV:  </p><blockquote><p>$ cd ~<br>$ git clone <a href="https://github.com/Itseez/opencv_contrib.git" target="_blank" rel="noopener">https://github.com/Itseez/opencv_contrib.git</a><br>$ cd opencv_contrib<br>$ git checkout 3.0.0  </p></blockquote></li><li><p>注意: opencv_contrib 和 OpenCV 版本要一致  </p></li><li><p>是时候 build OpenCV 辣:  </p><blockquote><p>$ cd ~/opencv<br>$ mkdir build<br>$ cd build<br>$ cmake -D CMAKE_BUILD_TYPE=RELEASE \<br>  -D CMAKE_INSTALL_PREFIX=/usr/local \<br>  -D INSTALL_C_EXAMPLES=ON \<br>  -D INSTALL_PYTHON_EXAMPLES=ON \<br>  -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \<br>  -D BUILD_EXAMPLES=ON ..  </p></blockquote></li><li><p><strong>如果要装 OpenCV 3.1.0, 你需要设置 DINSTALL_C_EXAMPLES=OFF</strong>   </p></li><li>最后, 编译! :  <blockquote><p>$ make -j4  </p></blockquote></li></ul><p>注意<br>cmake -D CMAKE_BUILD_TYPE=RELEASE  -D CMAKE_INSTALL_PREFIX=/usr/local  -D INSTALL_C_EXAMPLES=ON  -D INSTALL_PYTHON_EXAMPLES=ON  -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules  -D BUILD_EXAMPLES=ON .. </p><p>即<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cmake -D CMAKE_BUILD_TYPE=RELEASE  -D CMAKE_INSTALL_PREFIX=/usr/<span class="built_in">local</span>  -D INSTALL_C_EXAMPLES=ON  -D INSTALL_PYTHON_EXAMPLES=ON  -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules  -D BUILD_EXAMPLES=ON ..</span><br></pre></td></tr></table></figure></p><h3 id="卸载重装"><a href="#卸载重装" class="headerlink" title="卸载重装"></a>卸载重装</h3><p>ref: <a href="https://www.cnblogs.com/txg198955/p/5990295.html" target="_blank" rel="noopener">ubuntu卸载opencv并重装opencv3.0.0</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一、 卸载opencv2.4.9： Going to the <span class="string">"build"</span> folder directory of opencv from terminal, and execute the following：</span><br><span class="line">1. $ sudo make uninstall</span><br><span class="line">2. $ <span class="built_in">cd</span> ..</span><br><span class="line">3. $ sudo rm -r build</span><br><span class="line">4. $ sudo rm -r /usr/<span class="built_in">local</span>/include/opencv2 /usr/<span class="built_in">local</span>/include/opencv /usr/include/opencv /usr/include/opencv2 /usr/<span class="built_in">local</span>/share/opencv /usr/<span class="built_in">local</span>/share/OpenCV /usr/share/opencv /usr/share/OpenCV /usr/<span class="built_in">local</span>/bin/opencv* /usr/<span class="built_in">local</span>/lib/libopencv*</span><br></pre></td></tr></table></figure><h3 id="安装-opencv-3-2-0"><a href="#安装-opencv-3-2-0" class="headerlink" title="安装 opencv 3.2.0"></a>安装 opencv 3.2.0</h3><p>ref: <a href="https://blog.csdn.net/yudiemiaomiao/article/details/72780790" target="_blank" rel="noopener">ubuntu 16.04 安装opencv 3.2.0</a></p><ol><li>安装 opencv 依赖包   </li><li><p>下载 opencv3.2.0<br>这里需要下载 opencv 和 opencv_contrib (后者会在 cmake 配置的时候用到)，这是因为 opencv3 以后 SIFT 和 SURF 之类的属性被移到了 contrib 中。   </p><blockquote><p>$ wget <a href="https://github.com/opencv/opencv/archive/3.2.0.zip" target="_blank" rel="noopener">https://github.com/opencv/opencv/archive/3.2.0.zip</a>  #从github上直接下载或者clone也可<br>$ wget <a href="https://github.com/opencv/opencv_contrib/archive/3.2.0.zip" target="_blank" rel="noopener">https://github.com/opencv/opencv_contrib/archive/3.2.0.zip</a>   </p></blockquote></li><li><p>安装 opencv3.2.0   </p></li></ol><p>cd VirtualEnv/opencv<br>cd opencv<br>git checkout 3.2.0<br>cd ../opencv_contrib<br>git checkout 3.2.0<br>cd ..  </p><p>cd opencv<br>mkdir build<br>cd build<br>cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..  </p><p>CMAKE_INSTALL_PREFIX：安装的python目录前缀，指定了python模块的安装路径：CMAKE_INSTALL_PREFIX/lib/python2.7/dist-packages，获取该路径的方式可以用： </p><p>python -c “import sys; print sys.prefix”  </p><p>在安装过程中，很有可能会出现错误：ICV: Downloading ippicv_linux_20151201.tgz 超时，据说此部分可有可无，可自行搜索文件名进行下载，然后替换opencv-3.2.0/3rdparty/ippicv/downloads/linux-*目录下的同名文件，重新cmake。</p><p>optional(显示指定一些编译内容），我在安装时未显示指定：</p><p>cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local WITH_TBB=ON -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON -D BUILD_EXAMPLES=ON -D WITH_QT=ON -D WITH_OPENGL=ON -D ENABLE_FAST_MATH=1 -D WITH_CUDA=ON -D CUDA_FAST_MATH=1 -D WITH_CUBLAS=1 -D CUDA_GENERATION=Auto -D WITH_GSTREAMER_0_10=OFF ..  </p><p>在 build 目录下：  </p><p>make -j4  </p><p>-j4 表示四核运算，可根据电脑配置选择。</p><p>然后<br>编译没问题的话, 就可以安装了:</p><p>sudo make install<br>sudo ldconfig -v  </p><p>(11) 步骤11：<br>如果安装无误, OpenCV 现在已经安装在 /usr/local/lib/python2.7/site–packages 中了. 但是考虑到我们的虚拟环境 cv 还没有 OpenCV, 我们需要建立一个软链:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~  </span><br><span class="line"><span class="built_in">cd</span> VirtualEnv/py27env  </span><br><span class="line"><span class="built_in">cd</span> lib/python2.7/site-packages  </span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/lib/python2.7/dist-packages/cv2.so cv2.so</span><br></pre></td></tr></table></figure><p>(12) 步骤 12:<br>恭喜 ! 你完成了在 Ubuntu 上安装 OpenCV 3.0 和 Python 2.7+<br>所有剩下的就是验证一下啦：   </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ workon cv</span><br><span class="line">$ python</span><br><span class="line">&gt;&gt;&gt; import cv2</span><br><span class="line">&gt;&gt;&gt; cv2.__version__</span><br><span class="line">&gt;&gt;&gt; <span class="string">'3.0.0'</span></span><br></pre></td></tr></table></figure><p>参考<br><a href="https://blog.csdn.net/yudiemiaomiao/article/details/72780790" target="_blank" rel="noopener">ubuntu 16.04 安装opencv 3.2.0</a><br><a href="http://nooverfit.com/wp/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%EF%BC%8C%E5%9C%A8ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85opencv-3-0-%E5%92%8C-python-2-7/" target="_blank" rel="noopener">手把手教你，在Ubuntu上安装OpenCV 3.0 和 Python 2.7+</a><br><a href="https://www.jianshu.com/p/44ab75fbaef2" target="_blank" rel="noopener">python 虚拟环境[virtualenv/virtualenvwrapper]设置</a><br><a href="https://www.cnblogs.com/txg198955/p/5990295.html" target="_blank" rel="noopener">ubuntu卸载opencv并重装opencv3.0.0</a><br><a href="https://blog.csdn.net/u013453604/article/details/49781771" target="_blank" rel="noopener">Ubuntu下安装opencv 2.4.11</a></p><h2 id="spyder-切换环境"><a href="#spyder-切换环境" class="headerlink" title="spyder 切换环境"></a>spyder 切换环境</h2><p>cd VirtualEnv</p><p>source py35env/bin/activate<br>pip install ipython  </p><h3 id="安装-PyQt4"><a href="#安装-PyQt4" class="headerlink" title="安装 PyQt4"></a>安装 PyQt4</h3><p>sudo apt-get install libxext6 libxext-dev libqt4-dev libqt4-gui libqt4-sql  //delete “libqt4-gui”<br>sudo apt-get install qt4-dev-tools qt4-doc qt4-qtconfig qt4-demos qt4-designer<br>sudo apt-get install python-qt4<br>sudo apt-get install python-qt4-*<br>sudo apt-get install python-qscintilla2   </p><p>sudo apt-get install python3-pyqt4<br>sudo apt-get install python3-pyqt4.qsci<br>sudo apt-get install python3-pyqt4.qtsql<br>sudo apt-get install python3-pyqt4.phonon  </p><p><a href="https://blog.csdn.net/baidu_33850454/article/details/78225155" target="_blank" rel="noopener">Ubuntu：Unable to locate package（无法定位安装包）</a><br><a href="https://www.bbsmax.com/A/obzbX1Y15E/" target="_blank" rel="noopener">Desktop Ubuntu 14.04LTS/16.04科学计算环境配置</a><br><a href="https://blog.csdn.net/tao_627/article/details/46529587" target="_blank" rel="noopener">在ubuntu 14.04 64bit下配置安装PyQt4(python2.7和python3.4)</a>  </p><h3 id="安装-PySide"><a href="#安装-PySide" class="headerlink" title="安装 PySide"></a>安装 PySide</h3><p>sudo apt-get install build-essential<br>sudo apt-get install qt4-dev-tools qt4-doc qt4-qtconfig qt4-demos qt4-designer qtcreator<br>sudo pip3 install pyside  </p><p><a href="https://blog.csdn.net/u011008379/article/details/55299371" target="_blank" rel="noopener">Ubuntu下安装PySide</a><br><a href="https://stackoverflow.com/questions/46723857/pyside-installation-error-with-command-python-setup-py-egg-info-failed-with-er" target="_blank" rel="noopener">PySide Installation error with Command “python setup.py egg_info” failed with error code 1</a>  </p><h3 id="安装-ipython-pyside"><a href="#安装-ipython-pyside" class="headerlink" title="安装 ipython, pyside"></a>安装 ipython, pyside</h3><p>cd ~/VirtualEnv<br>source py35env/bin/activate<br>pip install pyside  </p><h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><ul><li>python2: ….   </li><li>python3: ….   </li><li>virtualenv, virtualenvwrapper   </li><li>sublime text 3   </li><li>texlive, texstudio   </li><li>pycharm   </li><li>spyder, spyder3  </li></ul>]]></content>
      
      <categories>
          
          <category> Records </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Configure </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数据库 (lmdb, mongodb) 的安装与使用，附 Sublime 插件配置</title>
      <link href="/2018/2018-05-02-database-sublime-nodejs/"/>
      <url>/2018/2018-05-02-database-sublime-nodejs/</url>
      <content type="html"><![CDATA[<h1 id="lmdb"><a href="#lmdb" class="headerlink" title="lmdb"></a>lmdb</h1><h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><p>lmdb 数据库是一个非关系型数据库。<br>caffe 先支持 leveldb，后支持 lmdb 的，lmdb 读取的效率更高，而且支持不同程序同时读取，而 leveldb 只允许一个程序读取。这一点在使用同样的数据跑不同的配置程序时很重要。<br>lmdb 有利于提高磁盘 IO 利用率。</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><blockquote><p>pip install lmdb</p></blockquote><h2 id="Apply"><a href="#Apply" class="headerlink" title="Apply"></a>Apply</h2><p>LMDB 和 SQLite/MySQL 等关系型数据库不同，属于 key-value 数据库（把 LMDB 想成 dict 会比较容易理解），键 key 与值 value 都是字符串。</p><p>### <strong>操作流程</strong></p><blockquote><p>安装    pip install lmdb<br>使用时    import lmdb<br>概括地讲，操作 LMDB 的流程是：</p><ul><li>打开环境    env = lmdb.open()</li><li>建立事务    txn = env.begin()</li><li>插入和修改  txn.put(key, value)</li><li>进行删除    txn.delete(key)</li><li>进行查询    txn.get(key)</li><li>进行遍历    txn.cursor()</li><li>提交更改    txn.commit()<br>注意上次 commit() 之后要用 env.begin() 更新 txn 。</li></ul></blockquote><p>简单示例：<br><img src="/images/2018-07/05_02_lmdb_img1.png" height="60%" width="60%"><br><img src="/images/2018-07/05_02_lmdb_img2.png" height="60%" width="60%"></p><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p><font color="Magenta"> important </font><br><a href="https://www.jianshu.com/p/66496c8726a1" target="_blank" rel="noopener">Python操作SQLite/MySQL/LMDB/LevelDB</a>  </p><p><a href="http://www.voidcn.com/article/p-badyeacd-ty.html" target="_blank" rel="noopener">lmdb 安装</a><br><a href="https://blog.csdn.net/yuanchheneducn/article/details/52934746" target="_blank" rel="noopener">lmdb 安装</a><br><a href="http://www.voidcn.com/article/p-uvbflary-bes.html" target="_blank" rel="noopener">Python lmdb</a><br><a href="http://www.voidcn.com/article/p-qeyubiym-dq.html" target="_blank" rel="noopener">lmdb – python</a><br><a href="http://www.voidcn.com/article/p-npjzqwyd-sc.html" target="_blank" rel="noopener">python lmdb 使用</a>  </p><p><a href="https://www.jianshu.com/p/yzFf8j" target="_blank" rel="noopener">lmdb 简介</a><br><a href="https://www.zhihu.com/question/41854215" target="_blank" rel="noopener">caffe 为什么要使用 lmdb 数据库？</a>  </p><h1 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h1><p>ref: <a href="http://www.runoob.com/mongodb/mongodb-intro.html" target="_blank" rel="noopener">MongoDB 简介</a>  </p><p>MongoDB 是一个基于分布式文件存储的开源数据库系统，由 C++ 语言编写。<br>在高负载的情况下，添加更多的节点，可以保证服务器性能。<br>MongoDB 旨在为 Web 应用提供可扩展的高性能数据存储解决方案。<br>MongoDB 将数据存储为一个文档，数据结构由键值 (key=&gt;value) 对组成。<br>MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。<br><img src="http://www.runoob.com/wp-content/uploads/2013/10/crud-annotated-document.png" height="60%" width="60%"></p><p><strong>主要特点</strong>：  </p><ul><li>面向文档存储，安装简单，操作容易，且支持多种编程语言 (如：RUBY，PYTHON，JAVA，C++，PHP，C# 等)  </li><li>可通过本地或网络创建数据镜像，有更强的扩展性  </li><li>如果负载的增加（需要更多的存储空间和更强的处理能力） ，它可以分布在计算机网络中的其他节点上这就是所谓的分片。  </li><li>GridFS是其中一个内置功能，可用于存放大量小文件。  </li><li>允许在服务端执行脚本，可以用Javascript编写某个函数，直接在服务端执行，也可以把函数的定义存储在服务端，下次直接调用即可。  </li><li>索引可以是任意属性，以实现更快的排序，如 FirstName=”Sameer”,Address=”8 Gandhi Road”  </li><li>支持丰富的查询表达式。  <ul><li>查询指令使用JSON形式的标记，可轻易查询文档中内嵌的对象及数组。  </li><li>使用update()命令可以实现替换完成的文档（数据）或者一些指定的数据字段 。  </li><li>Map/reduce 主要是用来对数据进行批量处理和聚合操作，使用Javascript编写，并可通过db.runCommand或mapreduce命令来执行MapReduce操作  </li><li>Map函数调用emit(key,value)遍历集合中所有的记录，将key与value传给Reduce函数进行处理。  </li></ul></li></ul><h2 id="Mongodb-安装"><a href="#Mongodb-安装" class="headerlink" title="Mongodb 安装"></a>Mongodb 安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927 </span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"deb http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.2 multiverse"</span> | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list </span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install -y mongodb-org</span><br></pre></td></tr></table></figure><blockquote><p>mongo -version<br>mongod<br>pgrep mongo -l<br>sudo systemctl start mongod<br>sudo systemctl status mongod<br>sudo systemctl enable mongod  </p></blockquote><p><img src="/images/2018-07/07_mongodb_img1.png" height="60%" width="60%"><br><img src="/images/2018-07/07_mongodb_img2.png" height="60%" width="60%"></p><p>参考<br><a href="https://www.jianshu.com/p/5598f1dcbb98" target="_blank" rel="noopener">Ubuntu 安装 Mongodb</a><br><a href="http://dblab.xmu.edu.cn/blog/mongodb/" target="_blank" rel="noopener">Ubuntu 下 MongoDB 安装与使用教程</a></p><h2 id="Robomongo-安装"><a href="#Robomongo-安装" class="headerlink" title="Robomongo 安装"></a>Robomongo 安装</h2><p><a href="https://robomongo.org/download" target="_blank" rel="noopener">Robomongo 官网</a><br>Robomongo is now Robo 3T </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.robomongo.org/0.9.0/linux/robomongo-0.9.0-linux-x86_64-0786489.tar.gz </span><br><span class="line">tar -xvf robomongo-0.9.0-linux-x86_64-0786489.tar.gz </span><br><span class="line">sudo mkdir /usr/<span class="built_in">local</span>/bin/robomongo</span><br><span class="line">sudo mv robomongo-0.9.0-linux-x86_64-0786489/* /usr/<span class="built_in">local</span>/bin/robomongo</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/bin/robomongo/bin</span><br><span class="line">./robomongo</span><br></pre></td></tr></table></figure><p><img src="/images/2018-07/07_robo3t_img1.png" height="60%" width="60%"><br><img src="/images/2018-07/07_robo3t_img2.png" height="60%" width="60%"><br><img src="/images/2018-07/07_robo3t_img3.png" height="60%" width="60%"></p><p>参考<br><a href="https://www.digitalocean.com/community/tutorials/how-to-install-mongodb-on-ubuntu-16-04" target="_blank" rel="noopener">How to Install MongoDB on Ubuntu 16.04</a><br><a href="https://stackoverflow.com/questions/35547860/how-to-install-robomongo-from-tar-gz-file-as-a-program-in-ubuntu-15-10" target="_blank" rel="noopener">How to install Robomongo from tar.gz file as a program in Ubuntu 15.10</a><br><a href="https://askubuntu.com/questions/739297/how-to-install-robomongo-on-ubuntu/781793" target="_blank" rel="noopener">How to install robomongo on Ubuntu</a></p><h2 id="mongodb-使用"><a href="#mongodb-使用" class="headerlink" title="mongodb 使用"></a>mongodb 使用</h2><blockquote><p>mongod<br>mongo<br>locate mongo  </p></blockquote><p>开启服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongo --dbpath /home/ubuntu/VirtualEnv/mongodb/data/db</span><br></pre></td></tr></table></figure></p><p>另一个终端<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongo</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-07/07_use_db_img1.png" height="60%" width="60%"><br><img src="/images/2018-07/07_use_db_img5.png" height="60%" width="60%"></p><h2 id="pymongo-使用"><a href="#pymongo-使用" class="headerlink" title="pymongo 使用"></a>pymongo 使用</h2><p>ref: <a href="https://zhuanlan.zhihu.com/p/20500518" target="_blank" rel="noopener">pymongo 简易教程</a></p><p><strong>利用 Python 操作 MongoDB 的步骤：</strong><br>(1) 安装 MongoDB<br>(2) 在 Python 上装入 pymongo 库<br>(3) 在终端中配置数据库   </p><blockquote><p>$ mongod –dbpath ~/data  </p></blockquote><p>(4) 浏览器中输入 localhost:27017/ 测试  </p><blockquote><p>hocalhost: 27017/<br>“It looks like you are trying to access MongoDB over HTTP on the native driver port.”<br>出现 ↑ 信息，说明已经成功，可以开始使用  </p></blockquote><p>(5) 使用 pymongo</p><p><strong>使用 pymongo</strong><br>(1) 连接 MongoClient<br>(2) 获取数据库 (database)<br>(3) 获取 Collection<br>(4) 存储数据<br>(5) 从 MongoDB 中调用数据<br>(6) 更新数据<br>(7) 删除数据<br>(8) 计数</p><h3 id="1-连接-MongoClient"><a href="#1-连接-MongoClient" class="headerlink" title="(1) 连接 MongoClient"></a>(1) 连接 MongoClient</h3><p>使用 pymongo 的第一步首先是连接 Client 来使用服务：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line">Client = MongoClient()</span><br></pre></td></tr></table></figure></p><h3 id="2-获取数据库-database"><a href="#2-获取数据库-database" class="headerlink" title="(2) 获取数据库 (database)"></a>(2) 获取数据库 (database)</h3><p>在 MongoDB 中一个实例能够支持多个独立的数据库，你可以用点取属性的方式来获取数据库，或者通过字典的方式获取：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db = Client.test_database</span><br><span class="line">db = Client[<span class="string">'test_database'</span>]</span><br></pre></td></tr></table></figure></p><p>(注：’test’ 可以换成你想要用的名字，比如 “python_database”)</p><h3 id="3-获取-Collection"><a href="#3-获取-Collection" class="headerlink" title="(3) 获取 Collection"></a>(3) 获取 Collection</h3><p>Collection 是存储在 MongoDB 中的一组文件，同获取 database 一样，你可以用点取属性的方式或者字典的方法获取：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">collection = db.test_collection</span><br><span class="line">collection = db[<span class="string">'test_collection'</span>]</span><br></pre></td></tr></table></figure></p><h3 id="4-存储数据"><a href="#4-存储数据" class="headerlink" title="(4) 存储数据"></a>(4) 存储数据</h3><p>在 MongoDB 中，数据是以 BSON 的类型存储的。见下面的 post:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line">post = [<span class="string">'type'</span>:<span class="string">'BSON'</span>,</span><br><span class="line">           <span class="string">'date'</span>:datetime.datetime.utcnow()]</span><br></pre></td></tr></table></figure></p><p>了解完 MongoDB 的数据格式后，你可以通过以下的方式插入数据 (其中 .inserted_id 将返回 ObjectId 对象)：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">document1 = ｛<span class="string">'x'</span>:<span class="number">1</span>｝</span><br><span class="line">document2 = ｛<span class="string">'x'</span>:<span class="number">2</span>｝</span><br><span class="line">posts = db.posts     <span class="comment">#你也可以不这样做，每次通过 db.posts 调用</span></span><br><span class="line">post_1 = posts.insert_one(document1).inserted_id</span><br><span class="line">post_2 = posts.insert_one(document2).inserted_id</span><br></pre></td></tr></table></figure></p><p>每个插入的数据对应一个 ObjectId，可直接查看：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>post_1</span><br><span class="line">ObjectId(...)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>post_2</span><br><span class="line">ObjectId(...)</span><br></pre></td></tr></table></figure></p><p>你还可以用 insert_many() 插入多个文档：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new_document = [&#123;<span class="string">'x'</span>:<span class="number">3</span>&#125;,</span><br><span class="line">                             &#123;<span class="string">'x'</span>:<span class="number">4</span>&#125;]</span><br><span class="line">result = posts.insert_many(new_document)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>result.inserted_ids</span><br><span class="line">[ObjectId(...),ObjectId(...)]</span><br></pre></td></tr></table></figure></p><h3 id="5-从-MongoDB-中调用数据"><a href="#5-从-MongoDB-中调用数据" class="headerlink" title="(5) 从 MongoDB 中调用数据"></a>(5) 从 MongoDB 中调用数据</h3><p>find_one() 函数能够从数据库中调出已存储的数据：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>posts.find_one()</span><br><span class="line">[<span class="string">'x'</span>:<span class="string">'1'</span>]</span><br></pre></td></tr></table></figure></p><p>但用 find_one() 的方法只能获取一个数据，如果数据库中存在多个数据时，它返回的是第一个的值。你也可以通过 ObjectId 来请求数据，效果和上面是一样的。如果你想打印出全部数据，可以通过迭代的方式获取：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> data <span class="keyword">in</span> posts.find():</span><br><span class="line">            data</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br><span class="line">&#123;<span class="string">u'x'</span>:<span class="number">1</span>,</span><br><span class="line"><span class="string">u'x'</span>:<span class="number">2</span>,</span><br><span class="line"><span class="string">u'x'</span>:<span class="number">3</span>,</span><br><span class="line"><span class="string">u'x'</span>:<span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure></p><p>你也可以加入限制性因素来获取特定的数据：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> post <span class="keyword">in</span> posts.find(&#123;<span class="string">'x'</span>:<span class="number">1</span>&#125;):</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>     post</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&#123;<span class="string">u'x'</span>:<span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure></p><p>查找条件中也可以用正则匹配来匹配 value。</p><h3 id="6-更新数据"><a href="#6-更新数据" class="headerlink" title="(6) 更新数据"></a>(6) 更新数据</h3><p>在 pymongo 中可以用 update_one() 来更新数据：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>posts.update_one(&#123;<span class="string">'x'</span>:<span class="number">4</span>&#125;,&#123;<span class="string">'$set'</span>:&#123;<span class="string">'x'</span>:<span class="number">3</span>&#125;&#125;)</span><br></pre></td></tr></table></figure></p><p>其中传入的第一个参数是你想要更新的数据，第二个是你想要更新的最新数据。其中 $set 部分是必要元素，如果没有会报出错误。除了 $set 外还有很多其它的比如 $inc，对应着不同的功能，在此先不赘述。<br>上面只是更新匹配到的第一个数据，同样地，也可以用 update_many() 一次更新多个值。</p><h3 id="7-删除数据"><a href="#7-删除数据" class="headerlink" title="(7) 删除数据"></a>(7) 删除数据</h3><p>同上，可以用 delete_one() 和 delete_many() 方法来删除数据，括号中是筛选条件：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>posts.delete_one(&#123;<span class="string">'x'</span>:<span class="number">3</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>posts.delete_one(&#123;<span class="string">'x'</span>:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="8-计数"><a href="#8-计数" class="headerlink" title="(8) 计数"></a>(8) 计数</h3><p>如果想知道 collection 中有多少文档，可以用 .count() 请求来获取符合条件的文档。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>posts.count()</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>posts.find(&#123;<span class="string">'x'</span>:<span class="number">1</span>&#125;)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p><h1 id="Sublime-Text-3-插件配置"><a href="#Sublime-Text-3-插件配置" class="headerlink" title="Sublime Text 3 插件配置"></a>Sublime Text 3 插件配置</h1><p>ref: <a href="https://www.zhihu.com/question/23427839" target="_blank" rel="noopener">左侧显示目录树</a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(1) Open folder</span><br><span class="line">(2) 安装 SideBarEnhancements 插件后，View -&gt; Side Bar -&gt; Show Side Bar</span><br></pre></td></tr></table></figure></p><p>安装 Sublime text 3 插件很方便，可以直接下载安装包解压到 Packages 目录 (菜单 -&gt; Preferences -&gt; Browse Packages)；也可以安装 package control 组件，然后直接在线安装。</p><h2 id="安装-package-control"><a href="#安装-package-control" class="headerlink" title="安装 package control"></a>安装 package control</h2><p>按 Ctrl+`(此符号位于 tab 按键上面)调出 console (注：避免热键冲突)<br>粘贴以下代码到命令行并回车：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import urllib.request,os; pf = <span class="string">'Package Control.sublime-package'</span>; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), <span class="string">'wb'</span>).write(urllib.request.urlopen( <span class="string">'http://sublime.wbond.net/'</span> + pf.replace(<span class="string">' '</span>,<span class="string">'%20'</span>)).<span class="built_in">read</span>())</span><br></pre></td></tr></table></figure></p><p>下载完成之后重启 Sublime Text 3。<br>如果在 Perferences -&gt; 中看到 package control 这一项，则安装成功。</p><p><strong>用 Package Control 安装插件的方法</strong><br>按下 Ctrl+Shift+P 调出命令面板；<br>输入 install 调出 Install Package 选项并回车，然后在列表中选中要安装的插件。</p><p><strong>安装 常用插件</strong><br>utf8<br>EMMET<br>sidebarenhancements<br>ctags  自动补全代码  </p><p>参考<br><a href="https://www.cnblogs.com/zhaof/p/8126306.html" target="_blank" rel="noopener">让你用sublime写出最完美的python代码–windows环境</a><br><a href="https://www.cnblogs.com/unflynaomi/p/5704293.html" target="_blank" rel="noopener">Ubuntu16.04下使用sublime text3搭建Python IDE</a><br><a href="https://blog.csdn.net/wxl1555/article/details/69941451" target="_blank" rel="noopener">Sublime Text 3安装及常用插件安装</a><br><a href="https://blog.csdn.net/mxdzchallpp/article/details/80054026" target="_blank" rel="noopener">sublime 跳转到函数定义: ctags</a></p><h2 id="安装常用插件"><a href="#安装常用插件" class="headerlink" title="安装常用插件"></a>安装常用插件</h2><h3 id="1-代码分析-SublimeLinter-flake8"><a href="#1-代码分析-SublimeLinter-flake8" class="headerlink" title="(1) 代码分析:  SublimeLinter-flake8"></a>(1) 代码分析:  SublimeLinter-flake8</h3><p>功能：<br>(1) 分析语法错误；<br>(2) 分析代码结构问题 (如使用没有定义的变量)；<br>(3) 分析不符合规范和美观的代码 </p><p>Flake8 是一个需要独立安装的命令行工具。在安装 Flake8 之后，再为 Sublime 安装 SublimeLinter 和 SublimeLinter-flake8 插件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ pip install flake8</span><br><span class="line">$ flake8 --<span class="built_in">help</span></span><br><span class="line">//$ pip install --upgrade flake8  <span class="comment">#升级插件</span></span><br><span class="line">$ pip3 install flake8</span><br></pre></td></tr></table></figure></p><p>SublimeLinter 是 Sublime 的代码框架，它可以集成 Flake8 这样的 linter 引擎来检查我们的代码，<br>并可以把它们的消息转换成 Sublime Text 然后把它们显示在我们代码旁边。<br>SublimeLinter 可以让 Flake8 和 Sublime Text 成为一个非常完美的搭档，可以直接在代码编辑器里看到 Flake8 的消息。 </p><p>所以首先我们需要安装 SublimeLinter，然后我们将安装连接 Flake8 和 SublimeLinter 的 SublimeLinter-flake8<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(1) 通过 ctrl+<span class="built_in">shift</span>+p 进入，并输入 install package，然后回车</span><br><span class="line">(2) 初次会慢点，然后出现提示</span><br><span class="line">(3) 输入要安装的 SublimeLinter，选择并安装</span><br><span class="line">(4) 插件安装完成后会出现一个 Package Control Messages 提示，重启 Sublime 后生效</span><br></pre></td></tr></table></figure></p><p>现在需要将 SublimeLinter 和 Flake8 集成连接起来，这里就通过 SublimeLinter-flake8 插件来完成<br>同样的,和上一个插件安装方法类似也是通过 ctrl+shift+p 进入，并输入 Flake8：<br>安装完成后重启生效。<br>为了让它更好用，还需要对 SublimeLinter-flake8 做一些简单配置</p><p>“mark_style”: “outline” -&gt; “squiggly_underline”<br>“lint_mode”: “background” -&gt; “load_save”</p><h3 id="2-代码自动补全-Anaconda"><a href="#2-代码自动补全-Anaconda" class="headerlink" title="(2) 代码自动补全:  Anaconda"></a>(2) 代码自动补全:  Anaconda</h3><p>功能：<br>(1) 代码的自动补全<br>(2) 显示 python 类、方法或者函数的使用方法<br>(3) 检查导入模块是否有效<br>(4) 按照 PEP8 规范自动化格式我们的代码<br>(5) 可以跳转到函数的定义或者类的定义<br>(6) ……</p><p><strong>Install the Anaconda Package</strong><br>安装同上，重启后生效。<br>简单配置：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"anaconda_linting"</span>: false,</span><br><span class="line">  <span class="string">"pep8"</span>: false,</span><br><span class="line">  <span class="string">"python_interpreter"</span>: <span class="string">"/usr/bin/python3"</span>,</span><br><span class="line">  <span class="string">"suppress_word_completions"</span>: true,</span><br><span class="line">  <span class="string">"suppress_explicit_completions"</span>: true,</span><br><span class="line">  <span class="string">"complete_parameters"</span>: false,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上述配置是因为这个插件和 flake8 插件的功能相互冲突，这里最好使用 flake8 的配置就可以了</p><h2 id="建立新的运行环境"><a href="#建立新的运行环境" class="headerlink" title="建立新的运行环境"></a>建立新的运行环境</h2><p>ref: <a href="https://www.jianshu.com/p/d612f8da3ffa" target="_blank" rel="noopener">Ubuntu 16.04下指定Sublime Text 3 默认python编译版本</a></p><p>### <strong>安装 PackageResourceViewer 插件</strong></p><blockquote><ol><li>输入 Ctrl+Shift+P  </li><li>输入 install，选择 Package Control:  Install Package  </li><li>选择 PackageResourceViewer，安装</li></ol></blockquote><p>### <strong>设置默认的 Python.sublime-build</strong></p><blockquote><ol><li>输入 Ctrl+Shift+P  </li><li>输入 resource，选择 PackageResourceViewer: Open Resource  </li><li>再选择 Python，再再选择 Python.sublime-build  </li><li>编辑 Python.sublime-build 将 “shell_cmd”: “python -u \”$file\””, 改为以下之一：  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"shell_cmd"</span>: <span class="string">"python3 -u \"$file\""</span>, //指定python3为.py默认编译器</span><br><span class="line"><span class="string">"shell_cmd"</span>: <span class="string">"python2 -u \"$file\""</span>, //指定python2为.py默认编译器</span><br><span class="line"><span class="string">"shell_cmd"</span>: <span class="string">"python -u \"$file\""</span>, //根据Ubuntu系统设置，看/usr/bin/python链接哪儿(ln)</span><br><span class="line"><span class="string">"shell_cmd"</span>: <span class="string">"指定版本python的绝对路径 -u \"$file\""</span>, //指定路径下的python编译器</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="5"><li>使用 python3 的配置文件示例 (Python.sublime-build)  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  //<span class="string">"shell_cmd"</span>:<span class="string">"python -u \"$file\""</span>,</span><br><span class="line">  <span class="string">"shell_cmd"</span>:<span class="string">"python3 -u \"$file\""</span>,  //指定python3为.py默认编译器</span><br><span class="line">  <span class="string">"file_regex"</span>:<span class="string">"^[ ]*File \"(...*?)\", line ([0-9]*)"</span>,</span><br><span class="line">  <span class="string">"selector"</span>:<span class="string">"source.python"</span>,</span><br><span class="line">  <span class="string">"env"</span>:&#123;<span class="string">"PYTHONIOENCODING"</span>:<span class="string">"utf-8"</span>&#125;,</span><br><span class="line">  <span class="string">"variants"</span>:[&#123;</span><br><span class="line">      <span class="string">"name"</span>:<span class="string">"Syntax Check"</span>,</span><br><span class="line">      <span class="string">"shell_cmd"</span>:<span class="string">"python -m py_compile \"$&#123;file&#125;\""</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><blockquote><ol start="6"><li>Ctrl+S 保存配置文件<br>注：有关 .sublime-build 的配置信息说明，可参见  </li><li>重启 Sublime Text 3  </li><li>打开 .py 文件，Ctrl + B 即可编译执行<br>方便、顺眼多了</li></ol></blockquote><p>### <strong>与其他方法的使用比较</strong></p><p>网上也有其他变通方法，可参考以下链接<br><a href="">ubuntu 下 sublime text 3 加入 python3 环境支持</a><br><a href="http://www.cnblogs.com/vingi/articles/2997043.html" target="_blank" rel="noopener">指定 ubuntu 下的 python 运行版本</a></p><p>前者，每次编译时选择麻烦<br>后者，改系统默认配置，可能引发其他依赖异常<br>本文 ctrl+b 可直接编译运行，又不改系统默认配置，简单方便，是合适的解决办法</p><h2 id="Tools-gt-Build-System-gt-Python2-3"><a href="#Tools-gt-Build-System-gt-Python2-3" class="headerlink" title="Tools &gt; Build System &gt; Python2/3"></a>Tools &gt; Build System &gt; Python2/3</h2><p>安装 Package Control<br><img src="/images/2018-07/07_sublime_img1.png" height="60%" width="60%">  </p><p>更改 Python.sublime-build<br><img src="/images/2018-07/07_sublime_img2.png" height="60%" width="60%">  </p><p>建立新的运行环境<br><img src="/images/2018-07/07_sublime_img3.png" height="60%" width="60%">  </p><p>存储位置在 Browse Package &gt; User 中<br><img src="/images/2018-07/07_sublime_img4.png" height="60%" width="60%">  </p><p>参考<br><a href="https://www.yalewoo.com/sublime_text_3_python_build_system.html" target="_blank" rel="noopener">sublime text 3 如何配置自己的 build-system，在命令行中运行 python </a><br><a href="http://qihoo.pro/sublime-with-multiversion-python.html" target="_blank" rel="noopener">Sublime 编辑器中集成多个 python 版本</a><br><a href="https://blog.csdn.net/u012905422/article/details/52526640" target="_blank" rel="noopener">sublime 运行 python 文件简单配置与安装</a><br><a href="https://www.jianshu.com/p/c9d76fe898c8" target="_blank" rel="noopener">Sublime 深度定制：build system 的妙用</a>  </p><h2 id="anaconda-不能自动补全第三方库"><a href="#anaconda-不能自动补全第三方库" class="headerlink" title="anaconda 不能自动补全第三方库"></a>anaconda 不能自动补全第三方库</h2><p>参考<br><a href="http://www.voidcn.com/article/p-owbfoovb-ue.html" target="_blank" rel="noopener">Sublime Text 3 配置 python 开发环境遇见的问题</a><br><a href="http://blog.5ibc.net/p/30141.html" target="_blank" rel="noopener">mac sublime anaconda 不能自动补全第三方库</a>  </p><p>错因是系统有两个 Python，所以使用 anaconda 插件的 Go to definition 功能时，会跳转到系统自带的 python 那里去，也就是说，这个时候的 anaconda 能够对系统自带的库 work well，但是对我想使用的 python3(非系统路径python) 的库就不行。<br>其原因在于，anaconda 依赖于 sublime 的 Python inerpreter，sublime 调用什么 Python，anaconda 就搜寻这个 Python 的库。<br>这时就需要更改 sublime 的 Python interpreter，不同环境下使用不同的 Python，解决方法有三种：<br>(1) 更改 python.sublime-build<br>(2) 更改 project configuration<br>注：sublime 的 project 很重要，很多插件都是在 project 下才有用的，比如侧边栏增强的那个插件，你的文件要是不在 project 里，装了跟没装一样。其实我现在也没搞明白这个 project 的配置，anaconda 是推荐在 project 里配置，这样不同的 project 有不同的配置，但是我发现在里面写没作用。<br>(3) 改全局配置，打开 anaconda 的 user 配置<br>我的解决方案是 (1,3) 双管齐下才有效</p><h1 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h1><p>ref: <a href="http://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="noopener">Node.js 教程</a></p><p>简单的说 Node.js 就是运行在服务端的 JavaScript。<br>Node.js 是一个基于 Chrome JavaScript 运行时建立的一个平台。<br>Node.js 是一个事件驱动 I/O 服务端 JavaScript 环境，基于 Google 的 V8 引擎，V8 引擎执行 Javascript 的速度非常快，性能非常好。</p><p>什么情况下 Node.js 是个非常好的选择？<br>对于前端程序员，不懂得像 PHP、Python 或 Ruby 等动态编程语言，但是想创建自己的服务，……<br>对于后端程序员，想部署一些高性能的服务，……</p><p>## <strong>安装 (failed)</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install nodejs</span><br><span class="line">$ sudo apt-get install npm</span><br><span class="line">$ nodejs --version</span><br><span class="line">v4.2.6</span><br><span class="line">$ npm --version</span><br><span class="line">3.5.2</span><br></pre></td></tr></table></figure><p>但是这个版本太低了，安装 electron 失败。</p><p>于是升级。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install npm@latest -g</span><br><span class="line">$ sudo apt-get install node-legacy</span><br><span class="line">$ node --version         <span class="comment">#$ node -v</span></span><br><span class="line">v4.2.6</span><br><span class="line">$ sudo npm install -g n  <span class="comment">#failed!</span></span><br><span class="line">$ sudo n stable          <span class="comment">#找不到命令</span></span><br></pre></td></tr></table></figure></p><p>但是这个还是原来的旧版本，没有升级成功。</p><p>## <strong>安装</strong> </p><p>ref: <a href="https://nodejs.org/zh-cn/download/package-manager/#debian-and-ubuntu-based-linux-distributions" target="_blank" rel="noopener">官网说明</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install curl</span><br><span class="line">$ curl </span><br><span class="line">$ sudo apt-get install -y nodejs</span><br><span class="line">$ node -v</span><br><span class="line">v10.6.0</span><br><span class="line">$ npm -v</span><br><span class="line">6.1.0</span><br></pre></td></tr></table></figure><p>安装 electron<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/electron/electron-quick-start</span><br><span class="line">$ <span class="built_in">cd</span> electron-quick-start</span><br><span class="line">$ npm install</span><br><span class="line">$ npm start</span><br></pre></td></tr></table></figure></p><p><img src="/images/2018-07/07_weibo_img1.png" height="60%" width="60%"><br><img src="/images/2018-07/07_weibo_img2.png" height="60%" width="60%"><br><img src="/images/2018-07/07_weibo_img3.png" height="60%" width="60%"></p><h1 id="其它问题"><a href="#其它问题" class="headerlink" title="其它问题"></a>其它问题</h1><p>ref: <a href="https://blog.csdn.net/ping523/article/details/54945083" target="_blank" rel="noopener">无法锁定管理目录(/var/lib/dpkg/)，是否有其他进程正占用它？</a></p><p>Error:<br>E: 无法获得锁 /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)<br>E: 无法锁定管理目录(/var/lib/dpkg/)，是否有其他进程正占用它？ </p><p>解决方法一：<br>#:ps -aux (列出进程，形式如)<br>root 5765 0.0 1.0 18204 15504 ? SN 04:02 0:00 apt-get -qq -d<br>找到最后一列以apt-get 开头的进程<br>#:sudo kill -9 该进程的PID </p><p>解决方法二：<br>#:sudo rm /var/cache/apt/archives/lock<br>#:sudo rm /var/lib/dpkg/lock </p>]]></content>
      
      <categories>
          
          <category> Records </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Configure </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>卷积神经网络中的卷积和池化操作</title>
      <link href="/2018/2018-04-22-TensorFlow-conv2d-pool/"/>
      <url>/2018/2018-04-22-TensorFlow-conv2d-pool/</url>
      <content type="html"><![CDATA[<h1 id="What-is-CNNs"><a href="#What-is-CNNs" class="headerlink" title="What is CNNs?"></a>What is CNNs?</h1><p>卷积神经网络（ Convolutional Neural Networks, CNNs/ConvNets ），是神经网络的一种。</p><p>整个网络仍然表示一个单独的可微分的得分函数：从原始图像像素到类别。<br>最后的（全连接）层也仍然存在一个损失函数（如：SVM/Softmax）。</p><p>不同点在于：ConvNet 结构做出了显式的假设，即输入为图片。<br>这个假设允许我们把确定的性质编码进网络结构中。<br>而卷积网络的结构也使得前馈函数能够更加有效地实现，并大量地缩减了网络中所需要的参数。</p><h1 id="How-to-use-it-in-TF"><a href="#How-to-use-it-in-TF" class="headerlink" title="How to use it in TF?"></a>How to use it in TF?</h1><h2 id="tf-nn-conv2d"><a href="#tf-nn-conv2d" class="headerlink" title="tf.nn.conv2d"></a>tf.nn.conv2d</h2><blockquote><p>tf.nn.conv2d(input, filter, strides, padding, use_cudnn_on_gpu=None, data_format=None, name=None)</p></blockquote><p>params:</p><ul><li><strong>input</strong> :  [batch, in_height, in_width, in_channels]</li><li><strong>filter</strong>  :  [filter_height, filter_width, in_channels, out_channels]</li><li><strong>strides</strong> :  [1, stride_height, stride_width, 1]</li><li><strong>padding</strong> :  ‘SAME’, ‘VALID’</li><li>data_format :  ‘NHWC’, ‘NCHW’</li></ul><p>return:  </p><ul><li>[batch, out_height, out_width, out_channels]  </li></ul><p>(1) if padding=’SAME’,<br>out_height = ceil(in_height / stride_height)<br>out_width  = ceil(in_width / stride_width)<br>(2) if padding=’VALID’,<br>out_height = ceil((in_height - filter_height + 1) / stride_height)<br>out_width = ceil((in_width - filter_width + 1) / stride_width)</p><h2 id="tf-nn-max-pool-tf-nn-avg-pool"><a href="#tf-nn-max-pool-tf-nn-avg-pool" class="headerlink" title="tf.nn.max_pool, tf.nn.avg_pool"></a>tf.nn.max_pool, tf.nn.avg_pool</h2><blockquote><p><strong>tf.nn.max_pool</strong>(value, ksize, strides, padding, data_format=’NHWC’, name=None)<br><strong>tf.nn.avg_pool</strong>(value, ksize, strides, padding, data_format=’NHWC’, name=None)  </p></blockquote><p>params:</p><ul><li><strong>value</strong> :  [batch, in_height, in_width, in_channels]</li><li><strong>ksize</strong> :   [1, ksize_height, ksize_widht, 1]</li><li><strong>strides</strong> :  [1, stride_height, stride_width, 1]</li><li><strong>padding</strong> :  ‘SAME’, ‘VALID’</li><li>data_format :  ‘NHWC’, ‘NCHW’</li></ul><p>return:</p><ul><li>[batch, out_height, out_width, in_channels]</li></ul><p>(1) if padding=’SAME’,<br>out_height = ceil(in_height / stride_height)<br>out_width  = ceil(in_width  / stride_width )<br>(2) if padding=’VALID’,<br>out_height = ceil((in_height - ksize_height + 1) / stride_height)<br>out_width  = ceil((in_width  - ksize_width  + 1) / stride_width )</p><h2 id="Same-Params"><a href="#Same-Params" class="headerlink" title="Same Params"></a>Same Params</h2><ul><li><p>strides 代表切边移动的步长，4 个方向；而 padding 是切片是否可以越过边缘，有两种方式，SAME 为越过，VALID 为不越过，它的意义是决定切片中心是否经过图的边缘。</p></li><li><p>data_format 表示输入数据的格式，需要跟输入数据的格式保持一致。有 ‘NHWC’ 和 ‘NCHW’ 两种，默认是 ‘NHWC’ ，即 [batch, in_height, in_width, in_channels]</p></li><li>padding 表示是否填充。有两个格式。  <ul><li>‘SAME’  得到的输出特征图，跟输入特征图<strong>相同</strong>  </li><li>‘VALID’ 得到的输出特征图，跟输入特征图<strong>不相同</strong></li></ul></li></ul><h1 id="More-details-about-CNNs…"><a href="#More-details-about-CNNs…" class="headerlink" title="More details about CNNs…"></a>More details about CNNs…</h1><h2 id="tf-nn-conv2d-1"><a href="#tf-nn-conv2d-1" class="headerlink" title="tf.nn.conv2d"></a>tf.nn.conv2d</h2><blockquote><p><strong>tf.nn.conv2d(input, filter, strides, padding, use_cudnn_on_gpu=None, data_format=None, name=None)</strong>  </p></blockquote><p>五个<strong>参数</strong>：</p><ol><li>input ，指需要做卷积的输入图像，是一个 4 维 tensor ，要求类型为 float32 或 float64 其中之一。<br>其 shape= [batch, in_height, in_width, in_channels]，具体含义是 [训练时一个 batch 的图片数量, 图片高度, 图片宽度, 图像通道数]  </li><li>filter ，相当于 CNN 中的卷积核，要求类型与参数 input 相同。<br>注意第三维 in_channels ，就是参数 input 的第四维。<br>其 shape= [filter_height, filter_width, in_channels, out_channels] ，具体含义是 [卷积核的高度, 卷积核的宽度, 图像通道数, 卷积核个数]  </li><li>strides ，卷积时在图像每一维的步长，这是一个一维的向量，长度为 4.<br>strides.shape = [1, stride_height, stride_width, 1]<br>注：必须有 strides[0]=strides[3]=1. 绝大多数情况下，水平的 stride 和竖直的 stride 一样，即 strides = [1, stride, stride, 1]。</li><li>padding ，是一个 string 类型的量，只能是 ‘SAME’, ‘VALID’ 其中之一，这个值决定了不同的卷积方式</li><li>use_cudnn_on_gpu ，bool 类型，是否使用 cudnn 加速，默认为 true </li></ol><p><strong>返回</strong>：<br>  一个 tensor ，这个输出就是我们常说的 feature map 。</p><p><strong>计算过程</strong>：  </p><ol><li>展平 filter 成如下 2-D matrix ，其 shape= [filter_height <em> filter_width </em> in_channels, out_channels]  </li><li>从 input tensor 中提取 patches 构成一个 virtual tensor ，其 shape= [batch, out_height, out_width, filter_height <em> filter_width </em> in_channels]  </li><li>对于每一个 patch ，右乘上 (1) 中的 filter matrix 。即 [batch, out_height, out_width, filter_height <em> filter_width </em> in_channels] x [filter_height <em> filter_width </em> in_channels, out_channels] ，其结果的 shape 就是 [batch, out_height, out_width, out_channels]  </li><li>输出结果的 shape 计算 （ceil 表示向上取整）   <ul><li>padding = ‘SAME’<br>out_height = ceil( in_height / stride_height )<br>out_width  = ceil( in_width / stride_width )  </li><li>padding = ‘VALID’<br>out_height = ceil( (in_height - filter_height + 1) / stride_height )<br>out_width  = ceil( (in_width - filter_width + 1) / stride_width )  </li></ul></li></ol><h2 id="tf-nn-max-pool-tf-nn-avg-pool-1"><a href="#tf-nn-max-pool-tf-nn-avg-pool-1" class="headerlink" title="tf.nn.max_pool, tf.nn.avg_pool"></a>tf.nn.max_pool, tf.nn.avg_pool</h2><blockquote><p><strong>tf.nn.max_pool</strong>(value, ksize, strides, padding, data_format=’NHWC’, name=None)<br><strong>tf.nn.avg_pool</strong>(value, ksize, strides, padding, data_format=’NHWC’, name=None)  </p></blockquote><p>四个<strong>参数</strong>：  </p><ol><li>value ，需要池化的输入。一般池化层接在卷积层后面，所以输入通常是 feature map ，依然是 [batch, in_height, in_width, in_channels] 这样形式的 shape   </li><li>ksize ，池化窗口的大小，取一个四维向量，一般是 [1, height, width, 1] 。因为我们不想在 batch 和 channels 上做池化，所以这两个维度设为 1   </li><li>strides ，和卷积类似，窗口在每一维度上滑动的步长，一般也是 [1, stride, stride, 1]   </li><li>padding ，和卷积类似，可以取 ‘VALID’ 或 ‘SAME’   </li></ol><p><strong>返回</strong>：<br> 一个 tensor ，类型不变，shape 仍为 [batch, height, width, channels] 的形式</p><h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><ol><li><p>conv2d, pool in TensorFlow  </p></li><li><p>Convolutional Neural Networks, CNNs/ConvNets<br><a href="http://cs231n.github.io/convolutional-networks/" target="_blank" rel="noopener">CS231n Convolutional Neural Networks for Visual Recognition</a><br><a href="https://blog.csdn.net/zouxy09/article/details/8781543" target="_blank" rel="noopener">深度学习笔记整理系列之七</a><br><a href="https://blog.csdn.net/v_july_v/article/details/51812459" target="_blank" rel="noopener">CNN 笔记：通俗理解卷积神经网络</a>  </p></li></ol>]]></content>
      
      <categories>
          
          <category> Deep Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNN </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
